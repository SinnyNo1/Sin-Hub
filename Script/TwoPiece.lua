local lIliillIiIli1i1l1iill = assert local iiIlI1IlIIi1Iil1l1i = select local iilII11i1I1ii11Iiil = tonumber local l11IliiiillIllli111 = unpack local IIiI1l111iI111IIll1 = pcall local illil1I1Iil11ililll = setfenv local iIIII11Ill11il1ii1l = setmetatable local iI1iIl1lIIiI1IIl1II = type local llIII111Ii11l11I1l1 = getfenv local lIliIiIIi1i11I11l1Il1 = tostring local li1illIIIi1lI1l11li = error local IlIiiIiiillIlIIiI11 = string.sub local lIl11I1iiIllill1IiIil = string.byte local illIIIllI1iIIilI1I1 = string.char local IiiIllillll1IIiIiii = string.rep local l1i1IIil1liiIllIlI1 = string.gsub local lIlliIiiIIiIIIIll1Ii1 = string.match local lIllllill1l1i1li1I1lI = table.insert local Iil1l1Il1IIIIii1IIl = lIl11I1iiIllill1IiIil("z", 1) local llil1iiliiIiI1IlIii, iliIIll1iii1IIi1Ili = #{728}, #{ 5979, 3561, 282, 5773, 2505, 29, 3894, 2573, 3938, 5979, 2624, 5598, 1560, 4431, 4293, 2049, 4718, 2812, 1811, 3624 } + Iil1l1Il1IIIIii1IIl + 130929 local III1liiiI1i1iIil1iI = {} local I11Ii1I11llIli11li1 = 1 local i1IIIllIiIlIi111ill, ill1ill1i11lIIillI1 local function lIlI11i1iIiIlIIill1II(IiiI1iiiiIll1il1l1l, l1IIi1ill11IIl111ll) local lIli11ii11111iiiilI IiiI1iiiiIll1il1l1l = l1i1IIil1liiIllIlI1(IlIiiIiiillIlIIiI11(IiiI1iiiiIll1il1l1l, 5), "..", function(lIl1iI11liIIii1lIl1ll) if lIl11I1iiIllill1IiIil(lIl1iI11liIIii1lIl1ll, 2) == 72 then lIli11ii11111iiiilI = iilII11i1I1ii11Iiil(IlIiiIiiillIlIIiI11(lIl1iI11liIIii1lIl1ll, 1, 1)) return "" else local lIli1iiiiiii1IliIl11i = illIIIllI1iIIilI1I1(iilII11i1I1ii11Iiil(lIl1iI11liIIii1lIl1ll, 16)) if lIli11ii11111iiiilI then local iillI1iI1il1I1i1IiI = IiiIllillll1IIiIiii(lIli1iiiiiii1IliIl11i, lIli11ii11111iiiilI) lIli11ii11111iiiilI = nil return iillI1iI1il1I1i1IiI else return lIli1iiiiiii1IliIl11i end end end) local function lIlil1lIiIiliiIIIl11I() local lIll1i1i1i11lIl11illI = lIl11I1iiIllill1IiIil(IiiI1iiiiIll1il1l1l, I11Ii1I11llIli11li1, I11Ii1I11llIli11li1) I11Ii1I11llIli11li1 = I11Ii1I11llIli11li1 + 1 return lIll1i1i1i11lIl11illI end local function l1I1illlIIl1I1Ii11I() local lIll1i1i1i11lIl11illI, lIli1iiiiiii1IliIl11i, iillI1iI1il1I1i1IiI, lIil1l111llI1I1iIi1 = lIl11I1iiIllill1IiIil(IiiI1iiiiIll1il1l1l, I11Ii1I11llIli11li1, I11Ii1I11llIli11li1 + 3) I11Ii1I11llIli11li1 = I11Ii1I11llIli11li1 + 4 return lIil1l111llI1I1iIi1 * 16777216 + iillI1iI1il1I1i1IiI * 65536 + lIli1iiiiiii1IliIl11i * 256 + lIll1i1i1i11lIl11illI end local function lliIliIII111iII1iii(i1Iil1iI1ilIllliill, lli1Illli1i1lIIll1l, l1II1II1iIillI1l1Ii) if l1II1II1iIillI1l1Ii then local lIl1l111Ill11liillil1, IliiiI1I11IIi1IIlII = 0, 0 for iI1IliI11l1iiI1ii1l = lli1Illli1i1lIIll1l, l1II1II1iIillI1l1Ii do lIl1l111Ill11liillil1 = lIl1l111Ill11liillil1 + 2 ^ IliiiI1I11IIi1IIlII * lliIliIII111iII1iii(i1Iil1iI1ilIllliill, iI1IliI11l1iiI1ii1l) IliiiI1I11IIi1IIlII = IliiiI1I11IIi1IIlII + 1 end return lIl1l111Ill11liillil1 else local ll1ii1l1il1iiIlliIl = 2 ^ (lli1Illli1i1lIIll1l - 1) return ll1ii1l1il1iiIlliIl <= i1Iil1iI1ilIllliill % (ll1ii1l1il1iiIlliIl + ll1ii1l1il1iiIlliIl) and 1 or 0 end end local function IIII11ii1IIliIliilI() local lIll1i1i1i11lIl11illI, lIli1iiiiiii1IliIl11i = l1I1illlIIl1I1Ii11I(), l1I1illlIIl1I1Ii11I() if lIll1i1i1i11lIl11illI == 0 and lIli1iiiiiii1IliIl11i == 0 then return 0 end return (-2 * lliIliIII111iII1iii(lIli1iiiiiii1IliIl11i, 32) + 1) * 2 ^ (lliIliIII111iII1iii(lIli1iiiiiii1IliIl11i, 21, 31) - 1023) * ((lliIliIII111iII1iii(lIli1iiiiiii1IliIl11i, 1, 20) * 4294967296 + lIll1i1i1i11lIl11illI) / 4503599627370496 + 1) end local iiI1I1iliI111iii1ii = bit or bit32 local lIl1i1IIIi1ilil11IiiI = iiI1I1iliI111iii1ii and iiI1I1iliI111iii1ii.bxor or function(lIll1i1i1i11lIl11illI, lIli1iiiiiii1IliIl11i) local IIllII1l1I1i1iiiiil = 1 local iillI1iI1il1I1i1IiI = 0 while lIll1i1i1i11lIl11illI > 0 and lIli1iiiiiii1IliIl11i > 0 do local iIII1ll1illI1iiIill = lIll1i1i1i11lIl11illI % 2 local ll1i1l1IIIlll1il1i1 = lIli1iiiiiii1IliIl11i % 2 if iIII1ll1illI1iiIill ~= ll1i1l1IIIlll1il1i1 then iillI1iI1il1I1i1IiI = iillI1iI1il1I1i1IiI + IIllII1l1I1i1iiiiil end lIll1i1i1i11lIl11illI = (lIll1i1i1i11lIl11illI - iIII1ll1illI1iiIill) / 2 lIli1iiiiiii1IliIl11i = (lIli1iiiiiii1IliIl11i - ll1i1l1IIIlll1il1i1) / 2 IIllII1l1I1i1iiiiil = IIllII1l1I1i1iiiiil * 2 end if lIll1i1i1i11lIl11illI < lIli1iiiiiii1IliIl11i then lIll1i1i1i11lIl11illI = lIli1iiiiiii1IliIl11i end while lIll1i1i1i11lIl11illI > 0 do local iIII1ll1illI1iiIill = lIll1i1i1i11lIl11illI % 2 if iIII1ll1illI1iiIill > 0 then iillI1iI1il1I1i1IiI = iillI1iI1il1I1i1IiI + IIllII1l1I1i1iiiiil end lIll1i1i1i11lIl11illI = (lIll1i1i1i11lIl11illI - iIII1ll1illI1iiIill) / 2 IIllII1l1I1i1iiiiil = IIllII1l1I1i1iiiiil * 2 end return iillI1iI1il1I1i1IiI end local function lIli1i1iI1iIIilIlI1II(lilIlI11IIlIlI1iiii) local ii11IIiiI1111il1llI = { lIl11I1iiIllill1IiIil(IiiI1iiiiIll1il1l1l, I11Ii1I11llIli11li1, I11Ii1I11llIli11li1 + 3) } I11Ii1I11llIli11li1 = I11Ii1I11llIli11li1 + 4 local lIll1i1i1i11lIl11illI = lIl1i1IIIi1ilil11IiiI(ii11IIiiI1111il1llI[1], ill1ill1i11lIIillI1) local lIli1iiiiiii1IliIl11i = lIl1i1IIIi1ilil11IiiI(ii11IIiiI1111il1llI[2], ill1ill1i11lIIillI1) local iillI1iI1il1I1i1IiI = lIl1i1IIIi1ilil11IiiI(ii11IIiiI1111il1llI[3], ill1ill1i11lIIillI1) local lIil1l111llI1I1iIi1 = lIl1i1IIIi1ilil11IiiI(ii11IIiiI1111il1llI[4], ill1ill1i11lIIillI1) ill1ill1i11lIIillI1 = (101 * ill1ill1i11lIIillI1 + lilIlI11IIlIlI1iiii) % 256 return lIil1l111llI1I1iIi1 * 16777216 + iillI1iI1il1I1i1IiI * 65536 + lIli1iiiiiii1IliIl11i * 256 + lIll1i1i1i11lIl11illI end local function lIII11Ili1iiIiiI1Ii(iIlI1i1liIiIl1l1iI1) local iIliI1iIIlliI1i1IiI = l1I1illlIIl1I1Ii11I() local Illi1i11iIli11ill1i = "" for iI1IliI11l1iiI1ii1l = llil1iiliiIiI1IlIii, iIliI1iIIlliI1i1IiI do Illi1i11iIli11ill1i = Illi1i11iIli11ill1i .. illIIIllI1iIIilI1I1(lIl1i1IIIi1ilil11IiiI(lIl11I1iiIllill1IiIil(IiiI1iiiiIll1il1l1l, I11Ii1I11llIli11li1 + iI1IliI11l1iiI1ii1l - 1), i1IIIllIiIlIi111ill)) i1IIIllIiIlIi111ill = (iIlI1i1liIiIl1l1iI1 * i1IIIllIiIlIi111ill + 85) % 256 end I11Ii1I11llIli11li1 = I11Ii1I11llIli11li1 + iIliI1iIIlliI1i1IiI return Illi1i11iIli11ill1i end i1IIIllIiIlIi111ill = lIlil1lIiIiliiIIIl11I() ill1ill1i11lIIillI1 = lIlil1lIiIiliiIIIl11I() local IIllliii1lliII1Ilil = {} for iI1IliI11l1iiI1ii1l = llil1iiliiIiI1IlIii, lIlil1lIiIiliiIIIl11I() do local lIli1I1iill1IiiI1l1il = lIlil1lIiIiliiIIIl11I() local lII1Ii1I11I1i1I11Ii = (iI1IliI11l1iiI1ii1l - 1) * 2 IIllliii1lliII1Ilil[lII1Ii1I11I1i1I11Ii] = lliIliIII111iII1iii(lIli1I1iill1IiiI1l1il, 1, 4) IIllliii1lliII1Ilil[lII1Ii1I11I1i1I11Ii + 1] = lliIliIII111iII1iii(lIli1I1iill1IiiI1l1il, 5, 8) end local function il1liIil1ilIiiIllli() local iiI11iIIIIlII1IlIli = { nil, nil, nil, {}, {}, {}, {} } l1I1illlIIl1I1Ii11I() lIlil1lIiIiliiIIIl11I() lIlil1lIiIiliiIIIl11I() l1I1illlIIl1I1Ii11I() l1I1illlIIl1I1Ii11I() lIlil1lIiIiliiIIIl11I() lIlil1lIiIiliiIIIl11I() l1I1illlIIl1I1Ii11I() lIlil1lIiIiliiIIIl11I() l1I1illlIIl1I1Ii11I() iiI11iIIIIlII1IlIli[1] = lIlil1lIiIiliiIIIl11I() lIlil1lIiIiliiIIIl11I() lIlil1lIiIiliiIIIl11I() lIlil1lIiIiliiIIIl11I() iiI11iIIIIlII1IlIli[3] = lIlil1lIiIiliiIIIl11I() l1I1illlIIl1I1Ii11I() local lIlIlii1il111iiIlIiI1 = l1I1illlIIl1I1Ii11I() for iI1IliI11l1iiI1ii1l = llil1iiliiIiI1IlIii, lIlIlii1il111iiIlIiI1 do iiI11iIIIIlII1IlIli[6][iI1IliI11l1iiI1ii1l - llil1iiliiIiI1IlIii] = il1liIil1ilIiiIllli() end l1I1illlIIl1I1Ii11I() local iIIlII11lIiIIlilIII = l1I1illlIIl1I1Ii11I() - (#{ 6688, 3038, 2138, 4547, 5699, 6159, 1796, 3772, 1456, 4431, 2587, 6313, 6190, 6523, 1904, 6113, 1628, 6077, 5573, 4707, 2871, 424 } + Iil1l1Il1IIIIii1IIl + 133598) local lIl1il1i1lilIlIil1l1l = lIlil1lIiIiliiIIIl11I() for iI1IliI11l1iiI1ii1l = llil1iiliiIiI1IlIii, iIIlII11lIiIIlilIII do local I11lll1il1llii1IIll = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil } local lIli1I1iill1IiiI1l1il = lIli1i1iI1iIIilIlI1II(lIl1il1i1lilIlIil1l1l) I11lll1il1llii1IIll[6] = lliIliIII111iII1iii(lIli1I1iill1IiiI1l1il, #{ 822, 2602, 667, 5950, 759, 2251, 6790, 4801, 1808, 2074 }, #{ 6601, 2133, 5326, 4940, 6867, 5852, 3010, 5331, 4562, 946, 4766, 5400, 5181, 541, 4037, 1638, 3133, 3182 }) I11lll1il1llii1IIll[5] = lliIliIII111iII1iii(lIli1I1iill1IiiI1l1il, #{ 5938, 5491, 906, 5680, 5625, 2537, 5521, 2053, 6778, 1356, 1876, 2764, 2002, 1705, 6526, 5867, 322, 6025, 6413 }, #{ 4566, 75, 1780, 4286, 2160, 2077, 944, 165, 481, 6846, 5376, 1372, 3331, 4692, 2919, 431, 3804, 5871, 207, 1481 } + Iil1l1Il1IIIIii1IIl + -116) I11lll1il1llii1IIll[1] = lliIliIII111iII1iii(lIli1I1iill1IiiI1l1il, #{1555}, #{ 1608, 5554, 5357, 6835, 5429, 79, 290, 1842, 2932 }) I11lll1il1llii1IIll[4] = lliIliIII111iII1iii(lIli1I1iill1IiiI1l1il, #{650}, #{ 1340, 2240, 2089, 1652, 1578, 6599, 6395, 3473, 4616, 4316, 1931, 2350, 1515, 5553, 2692, 6913, 1834, 4871 }) I11lll1il1llii1IIll[8] = lliIliIII111iII1iii(lIli1I1iill1IiiI1l1il, #{ 5244, 1020, 2972, 644, 3923, 2576, 2129, 1072, 948, 4554, 5977, 2808, 2732, 5214, 3921, 687, 6634, 3555, 6127, 5664, 3403 } + Iil1l1Il1IIIIii1IIl + -116, #{ 5537, 3828, 5945, 16, 6542, 6408, 3738, 3470, 4939, 5700, 4047, 2766, 3946, 3617, 5316, 6783, 1489, 5612, 345, 6244 } + Iil1l1Il1IIIIii1IIl + -110) iiI11iIIIIlII1IlIli[7][iI1IliI11l1iiI1ii1l] = I11lll1il1llii1IIll end lIlil1lIiIiliiIIIl11I() iiI11iIIIIlII1IlIli[2] = lIlil1lIiIiliiIIIl11I() local lIlIlii1il111iiIlIiI1 = l1I1illlIIl1I1Ii11I() for iI1IliI11l1iiI1ii1l = llil1iiliiIiI1IlIii, lIlIlii1il111iiIlIiI1 do iiI11iIIIIlII1IlIli[4][iI1IliI11l1iiI1ii1l] = l1I1illlIIl1I1Ii11I() end l1I1illlIIl1I1Ii11I() l1I1illlIIl1I1Ii11I() lIlil1lIiIiliiIIIl11I() lIlil1lIiIiliiIIIl11I() local lIlIlii1il111iiIlIiI1 = l1I1illlIIl1I1Ii11I() - (#{ 1859, 2924, 2051, 5707, 2474, 5439, 344, 5245, 444, 1002, 707, 5144, 71, 2825, 4021, 6505, 5090, 679, 2419, 2679, 2334, 400 } + Iil1l1Il1IIIIii1IIl + 133588) local illIiill1iI1i1IIl1I = lIlil1lIiIiliiIIIl11I() for iI1IliI11l1iiI1ii1l = llil1iiliiIiI1IlIii, lIlIlii1il111iiIlIiI1 do local l1I11I1lliliIi11l1I local iI1iIl1lIIiI1IIl1II = lIlil1lIiIiliiIIIl11I() if iI1iIl1lIIiI1IIl1II == #{ 6624, 5266, 5175, 6249, 5159, 5115, 1143, 1491, 3159, 1862, 4356, 1410, 3289, 5183, 2367, 6618, 3247, 3465, 731, 489 } then l1I11I1lliliIi11l1I = IIII11ii1IIliIliilI() end if iI1iIl1lIIiI1IIl1II == #{ 3917, 5541, 4149, 5254, 3603, 2364, 803, 754, 5424, 1172, 3531, 2908, 4212, 6372, 6390, 1747, 2433, 307, 2315, 5715, 6881, 1561, 2843 } + Iil1l1Il1IIIIii1IIl + 3 then l1I11I1lliliIi11l1I = IlIiiIiiillIlIIiI11(lIII11Ili1iiIiiI1Ii(illIiill1iI1i1IIl1I), #{ 2869, 6252, 72 }) end if iI1iIl1lIIiI1IIl1II == #{ 1008, 6757, 661, 1674, 4440, 6341, 969, 1848, 4381, 5530, 716, 5051, 1389, 2062, 166, 6369, 754, 2067, 1161, 2086, 262, 2812, 5148 } + Iil1l1Il1IIIIii1IIl + -37 then l1I11I1lliliIi11l1I = lIlil1lIiIiliiIIIl11I() end if iI1iIl1lIIiI1IIl1II == #{ 2982, 6536, 4970, 1385, 5777, 3361, 3721, 2018, 892, 3217, 6057, 3823, 6267, 6783, 4639, 1198, 4406, 3608, 5870, 1181 } + Iil1l1Il1IIIIii1IIl + -67 then l1I11I1lliliIi11l1I = IIII11ii1IIliIliilI() end if iI1iIl1lIIiI1IIl1II == #{ 6751, 2365, 15, 3843, 2350, 4896, 2940, 3915, 3428, 1728, 1625, 6626, 2593, 1288, 3290, 219, 1991, 784, 4251, 2470, 6508, 1397, 6255 } + Iil1l1Il1IIIIii1IIl + -40 then l1I11I1lliliIi11l1I = IlIiiIiiillIlIIiI11(lIII11Ili1iiIiiI1Ii(insEncKey), #{ 3770, 5311, 1615, 3957, 5760 }) end if iI1iIl1lIIiI1IIl1II == #{ 5857, 3721, 2262, 3739, 3967, 1269, 730, 1716, 1590, 3741 } then l1I11I1lliliIi11l1I = #{ 3633, 3516, 3900, 5730, 3748, 544, 3582, 5528, 5149, 2791, 6334, 4015, 236, 3130, 6456, 654, 5848, 5378, 4886, 278, 3860 } + Iil1l1Il1IIIIii1IIl + 111757 == #{ 3633, 3516, 3900, 5730, 3748, 544, 3582, 5528, 5149, 2791, 6334, 4015, 236, 3130, 6456, 654, 5848, 5378, 4886, 278, 3860 } + Iil1l1Il1IIIIii1IIl + 111757 end if iI1iIl1lIIiI1IIl1II == #{ 467, 1305, 6464, 3838, 848, 5631, 3768, 5364, 1699, 1628, 3614, 1739, 6007, 1651, 3998, 3031, 6737, 6681, 5863, 4541, 6532, 2585 } + Iil1l1Il1IIIIii1IIl + -104 then l1I11I1lliliIi11l1I = lIlil1lIiIiliiIIIl11I() end if iI1iIl1lIIiI1IIl1II == #{ 4134, 2755, 1102, 6096, 5272, 3517, 1132, 2992, 850, 1753, 342, 2917, 4611, 5965, 5469, 503, 4300, 420, 1515, 2033, 3891, 1862, 3735, 4622 } + Iil1l1Il1IIIIii1IIl + 57 then l1I11I1lliliIi11l1I = IIII11ii1IIliIliilI() + IIII11ii1IIliIliilI() end if iI1iIl1lIIiI1IIl1II == #{ 856, 290, 4668, 603, 6142, 1447, 6603, 2936, 4434, 1017, 2592, 3264, 1768, 5816, 522, 4319, 1880, 3945, 5227, 6227, 6953, 4606, 1547, 6667 } + Iil1l1Il1IIIIii1IIl + -49 then l1I11I1lliliIi11l1I = #{ 2690, 758, 4879, 6250, 2778, 1377, 3183, 5976, 6732, 2718, 4980, 6700, 4791, 4448, 677, 4175, 2086, 1969, 3562, 5036, 626 } + Iil1l1Il1IIIIii1IIl + 132319 == #{ 5162, 1001, 5012, 2094, 3282, 2839, 5149, 1961, 522, 4725, 867, 2275, 5461, 4642, 896, 2999, 5215, 4484, 5242, 4956, 5626, 4976, 1565 } + Iil1l1Il1IIIIii1IIl + 83865 end iiI11iIIIIlII1IlIli[5][iI1IliI11l1iiI1ii1l - llil1iiliiIiI1IlIii] = l1I11I1lliliIi11l1I end for iI1IliI11l1iiI1ii1l = llil1iiliiIiI1IlIii, iIIlII11lIiIIlilIII do local I11lll1il1llii1IIll = iiI11iIIIIlII1IlIli[7][iI1IliI11l1iiI1ii1l] local Iiii1iliIilIiiIlill = IIllliii1lliII1Ilil[I11lll1il1llii1IIll[8]] if Iiii1iliIilIiiIlill == #{4175, 644} and I11lll1il1llii1IIll[6] > 255 then I11lll1il1llii1IIll[7] = true I11lll1il1llii1IIll[10] = iiI11iIIIIlII1IlIli[5][I11lll1il1llii1IIll[6] - 256] end if Iiii1iliIilIiiIlill == #{ 2137, 2248, 1713, 5385 } then I11lll1il1llii1IIll[3] = iiI11iIIIIlII1IlIli[5][I11lll1il1llii1IIll[4]] end if Iiii1iliIilIiiIlill == #{3347} and I11lll1il1llii1IIll[1] > 255 then I11lll1il1llii1IIll[2] = true I11lll1il1llii1IIll[9] = iiI11iIIIIlII1IlIli[5][I11lll1il1llii1IIll[1] - 256] end if Iiii1iliIilIiiIlill == #{ 5045, 2764, 57 } then if I11lll1il1llii1IIll[1] > 255 then I11lll1il1llii1IIll[2] = true I11lll1il1llii1IIll[9] = iiI11iIIIIlII1IlIli[5][I11lll1il1llii1IIll[1] - 256] end if I11lll1il1llii1IIll[6] > 255 then I11lll1il1llii1IIll[7] = true I11lll1il1llii1IIll[10] = iiI11iIIIIlII1IlIli[5][I11lll1il1llii1IIll[6] - 256] end end end l1I1illlIIl1I1Ii11I() l1I1illlIIl1I1Ii11I() return iiI11iIIIIlII1IlIli end local function iIilIi111I1Il1i1III(iiI11iIIIIlII1IlIli, l1IIi1ill11IIl111ll, IiIIillillI1I1ilIli) local I1IIIIi1il11ii1iliI, lIlliIii1Ill1liii1Ili = 15, 10 local lIIl111l111Ii1lilIi = iiI11iIIIIlII1IlIli[7] local iI11IlllliIiIll111I = 2 local Ill1Iillii11ii1II1I = iiI11iIIIIlII1IlIli[6] local lIl1iliIIi1Ii1I1I111l = iiI11iIIIIlII1IlIli[1] local lIlIi1iI1I1iiii1ll1i1 = iiI11iIIIIlII1IlIli[3] local ii1iiI1Ili1l1liliI1 = 8 local lIli1IIIiIiiilil11lii = iiI11iIIIIlII1IlIli[4] local IiiiIiiil1I11ilI1I1 = 1 local function iiIIII1IilI1lil11I1(...) local lI1IliIiI1lllI1iiiI = 0 local IlIilIiill1lIiIlI11 = { l11IliiiillIllli111({}, 1, lIlIi1iI1I1iiii1ll1i1) } local ll1lIi1lIl1ii1llIil = 1 local iiIi1iII11llil1Iiil = {} local Iil1IllIl1lIii1iIiI = {} local l1IIi1ill11IIl111ll = llIII111Ii11l11I1l1() local lIlII11iIiIIllIiiIl1I = { ... } local IllIi1IliiIi1iiilIl = #lIlII11iIiIIllIiiIl1I - 1 for iI1IliI11l1iiI1ii1l = 0, IllIi1IliiIi1iiilIl do if iI1IliI11l1iiI1ii1l < lIl1iliIIi1Ii1I1I111l then IlIilIiill1lIiIlI11[iI1IliI11l1iiI1ii1l] = lIlII11iIiIIllIiiIl1I[iI1IliI11l1iiI1ii1l + 1] end end local function lIlilIllIiII11l1lIiIl(...) local iillI1iI1il1I1i1IiI = iiIlI1IlIIi1Iil1l1i("#", ...) local l1IiIl1l1li1iiI1liI = { ... } return iillI1iI1il1I1i1IiI, l1IiIl1l1li1iiI1liI end local function li1lIlIiIlilII11Ill() while true do local IlI1lII1IlliIIIilli = lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] local lIliliIIII1111iiii1Ii = IlI1lII1IlliIIIilli[8] ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil + 1 if lIliliIIII1111iiii1Ii < 12 then if lIliliIIII1111iiii1Ii >= 6 then if lIliliIIII1111iiii1Ii >= 9 then if lIliliIIII1111iiii1Ii >= 10 then if lIliliIIII1111iiii1Ii ~= 11 then if IlI1lII1IlliIIIilli[6] == 66 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil - 1 lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] = { [8] = 16, [5] = (IlI1lII1IlliIIIilli[5] - 104) % 256, [1] = (IlI1lII1IlliIIIilli[1] - 104) % 256 } else IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = IiIIillillI1I1ilIli[IlI1lII1IlliIIIilli[1]] end else IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = l1IIi1ill11IIl111ll[IlI1lII1IlliIIIilli[3]] end else local lIllIilI1iIl1111II1li = Ill1Iillii11ii1II1I[IlI1lII1IlliIIIilli[4]] local IIlilIlIl1iIiiiilI1 = {} if lIllIilI1iIl1111II1li[iI11IlllliIiIll111I] > 0 then do local l1illilillIll1l11I1 = {} IIlilIlIl1iIiiiilI1 = iIIII11Ill11il1ii1l({}, { __index = function(l1IiIl1l1li1iiI1liI, iilIlill1lIiliiI1i1) local iIiiIIIl1Ii1l1lI1lI = l1illilillIll1l11I1[iilIlill1lIiliiI1i1] return iIiiIIIl1Ii1l1lI1lI[1][iIiiIIIl1Ii1l1lI1lI[2]] end, __newindex = function(l1IiIl1l1li1iiI1liI, iilIlill1lIiliiI1i1, liIiI111lIIlI1iiIll) local iIiiIIIl1Ii1l1lI1lI = l1illilillIll1l11I1[iilIlill1lIiliiI1i1] iIiiIIIl1Ii1l1lI1lI[1][iIiiIIIl1Ii1l1lI1lI[2]] = liIiI111lIIlI1iiIll end }) for iI1IliI11l1iiI1ii1l = 1, lIllIilI1iIl1111II1li[iI11IlllliIiIll111I] do local I1lI1i1iiil1lIlIlli = lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] if I1lI1i1iiil1lIlIlli[ii1iiI1Ili1l1liliI1] == I1IIIIi1il11ii1iliI then l1illilillIll1l11I1[iI1IliI11l1iiI1ii1l - 1] = { IlIilIiill1lIiIlI11, I1lI1i1iiil1lIlIlli[IiiiIiiil1I11ilI1I1] } elseif I1lI1i1iiil1lIlIlli[ii1iiI1Ili1l1liliI1] == lIlliIii1Ill1liii1Ili then l1illilillIll1l11I1[iI1IliI11l1iiI1ii1l - 1] = { IiIIillillI1I1ilIli, I1lI1i1iiil1lIlIlli[IiiiIiiil1I11ilI1I1] } end ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil + 1 end if not iiIi1iII11llil1Iiil[IlIilIiill1lIiIlI11] then iiIi1iII11llil1Iiil[IlIilIiill1lIiIlI11] = {l1illilillIll1l11I1} else lIllllill1l1i1li1I1lI(iiIi1iII11llil1Iiil[IlIilIiill1lIiIlI11], l1illilillIll1l11I1) end end end local iIliiI1il1I1Il1I1ii = iIilIi111I1Il1i1III(lIllIilI1iIl1111II1li, l1IIi1ill11IIl111ll, IIlilIlIl1iIiiiilI1) IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = iIliiI1il1I1Il1I1ii end elseif lIliliIIII1111iiii1Ii >= 7 then if lIliliIIII1111iiii1Ii == 8 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil + (IlI1lII1IlliIIIilli[4] - iliIIll1iii1IIi1Ili) else local l1I11111iIll1IIiI1l = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[1]] local iillI1iI1il1I1i1IiI if IlI1lII1IlliIIIilli[7] then iillI1iI1il1I1i1IiI = IlI1lII1IlliIIIilli[10] else iillI1iI1il1I1i1IiI = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[6]] end IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5] + 1] = l1I11111iIll1IIiI1l IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = l1I11111iIll1IIiI1l[iillI1iI1il1I1i1IiI] end else local lIli1iiiiiii1IliIl11i, iillI1iI1il1I1i1IiI if IlI1lII1IlliIIIilli[2] then lIli1iiiiiii1IliIl11i = IlI1lII1IlliIIIilli[9] else lIli1iiiiiii1IliIl11i = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[1]] end if IlI1lII1IlliIIIilli[7] then iillI1iI1il1I1i1IiI = IlI1lII1IlliIIIilli[10] else iillI1iI1il1I1i1IiI = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[6]] end IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = lIli1iiiiiii1IliIl11i * iillI1iI1il1I1i1IiI end elseif lIliliIIII1111iiii1Ii < 3 then if lIliliIIII1111iiii1Ii < 1 then IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = IlI1lII1IlliIIIilli[3] elseif lIliliIIII1111iiii1Ii ~= 2 then IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = { l11IliiiillIllli111(III1liiiI1i1iIil1iI, 1, IlI1lII1IlliIIIilli[1] == 0 and 255 or IlI1lII1IlliIIIilli[1]) } else IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = IlI1lII1IlliIIIilli[1] ~= 0 if IlI1lII1IlliIIIilli[6] ~= 0 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil + 1 end end elseif lIliliIIII1111iiii1Ii < 4 then local lIli1iiiiiii1IliIl11i, iillI1iI1il1I1i1IiI if IlI1lII1IlliIIIilli[2] then lIli1iiiiiii1IliIl11i = IlI1lII1IlliIIIilli[9] else lIli1iiiiiii1IliIl11i = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[1]] end if IlI1lII1IlliIIIilli[7] then iillI1iI1il1I1i1IiI = IlI1lII1IlliIIIilli[10] else iillI1iI1il1I1i1IiI = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[6]] end if lIli1iiiiiii1IliIl11i == iillI1iI1il1I1i1IiI ~= (IlI1lII1IlliIIIilli[5] ~= 0) then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil + 1 end elseif lIliliIIII1111iiii1Ii == 5 then iiIi1iII11llil1Iiil[IlIilIiill1lIiIlI11] = nil local ili1iil11iI1II1i1ll = IlI1lII1IlliIIIilli[5] local lIlI1ll1ll1IilIiIi1ii = IlI1lII1IlliIIIilli[1] if lIlI1ll1ll1IilIiIi1ii == 1 then return true end local ii1i1l1iiIl11IlIIll = ili1iil11iI1II1i1ll + lIlI1ll1ll1IilIiIi1ii - 2 if lIlI1ll1ll1IilIiIi1ii == 0 then ii1i1l1iiIl11IlIIll = lI1IliIiI1lllI1iiiI end return true, ili1iil11iI1II1i1ll, ii1i1l1iiIl11IlIIll else local iillI1iI1il1I1i1IiI if IlI1lII1IlliIIIilli[7] then iillI1iI1il1I1i1IiI = IlI1lII1IlliIIIilli[10] else iillI1iI1il1I1i1IiI = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[6]] end IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[1]][iillI1iI1il1I1i1IiI] end elseif lIliliIIII1111iiii1Ii >= 18 then if lIliliIIII1111iiii1Ii < 21 then if lIliliIIII1111iiii1Ii >= 19 then if lIliliIIII1111iiii1Ii ~= 20 then local l1lI1i111liiIIi1ill = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[1]] for iI1IliI11l1iiI1ii1l = IlI1lII1IlliIIIilli[1] + 1, IlI1lII1IlliIIIilli[6] do l1lI1i111liiIIi1ill = l1lI1i111liiIIi1ill .. IlIilIiill1lIiIlI11[iI1IliI11l1iiI1ii1l] end IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = l1lI1i111liiIIi1ill elseif IlI1lII1IlliIIIilli[6] == 60 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil - 1 lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] = { [8] = 17, [5] = (IlI1lII1IlliIIIilli[5] - 158) % 256, [6] = (IlI1lII1IlliIIIilli[1] - 158) % 256 } else local lIli11lIiIii11lili1Ii = IlI1lII1IlliIIIilli[5] local Il11111IlI1iIIlI1Ii = {} for IilII1liI1Iil1l1IIl, l1illilillIll1l11I1 in pairs(iiIi1iII11llil1Iiil[IlIilIiill1lIiIlI11]) do for IilII1liI1Iil1l1IIl, iIiiIIIl1Ii1l1lI1lI in pairs(l1illilillIll1l11I1) do if iIiiIIIl1Ii1l1lI1lI[1] == IlIilIiill1lIiIlI11 and lIli11lIiIii11lili1Ii <= iIiiIIIl1Ii1l1lI1lI[2] then local IilIlilIIli1Ill1IlI = iIiiIIIl1Ii1l1lI1lI[2] if not Il11111IlI1iIIlI1Ii[IilIlilIIli1Ill1IlI] then iIilIi111I1Il1i1III(Iil1IllIl1lIii1iIiI, IlIilIiill1lIiIlI11[IilIlilIIli1Ill1IlI]) Il11111IlI1iIIlI1Ii[IilIlilIIli1Ill1IlI] = #Iil1IllIl1lIii1iIiI end iIiiIIIl1Ii1l1lI1lI[1] = Iil1IllIl1lIii1iIiI iIiiIIIl1Ii1l1lI1lI[2] = Il11111IlI1iIIlI1Ii[IilIlilIIli1Ill1IlI] end end end end else local ili1iil11iI1II1i1ll = IlI1lII1IlliIIIilli[5] local lII1Ii1I11I1i1I11Ii = ili1iil11iI1II1i1ll + 2 local l1lI1i111liiIIi1ill = { IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll](IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll + 1], IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll + 2]) } for iI1IliI11l1iiI1ii1l = 1, IlI1lII1IlliIIIilli[6] do IlIilIiill1lIiIlI11[lII1Ii1I11I1i1I11Ii + iI1IliI11l1iiI1ii1l] = l1lI1i111liiIIi1ill[iI1IliI11l1iiI1ii1l] end if IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll + 3] ~= nil then IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll + 2] = IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll + 3] else ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil + 1 end end elseif lIliliIIII1111iiii1Ii >= 22 then if lIliliIIII1111iiii1Ii ~= 23 then local lII1Ii1I11I1i1I11Ii = (IlI1lII1IlliIIIilli[6] - 1) * 50 local lIlIlIlliiII1iIIiiI1l = IlI1lII1IlliIIIilli[1] if lIlIlIlliiII1iIIiiI1l == 0 then lIlIlIlliiII1iIIiiI1l = lI1IliIiI1lllI1iiiI - IlI1lII1IlliIIIilli[5] end for iI1IliI11l1iiI1ii1l = 1, lIlIlIlliiII1iIIiiI1l do IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]][lII1Ii1I11I1i1I11Ii + iI1IliI11l1iiI1ii1l] = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5] + iI1IliI11l1iiI1ii1l] end elseif IlI1lII1IlliIIIilli[6] == 143 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil - 1 lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] = { [8] = 15, [5] = (IlI1lII1IlliIIIilli[5] - 90) % 256, [1] = (IlI1lII1IlliIIIilli[1] - 90) % 256 } else IiIIillillI1I1ilIli[IlI1lII1IlliIIIilli[1]] = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] end else local lIli1iiiiiii1IliIl11i, iillI1iI1il1I1i1IiI if IlI1lII1IlliIIIilli[2] then lIli1iiiiiii1IliIl11i = IlI1lII1IlliIIIilli[9] else lIli1iiiiiii1IliIl11i = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[1]] end if IlI1lII1IlliIIIilli[7] then iillI1iI1il1I1i1IiI = IlI1lII1IlliIIIilli[10] else iillI1iI1il1I1i1IiI = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[6]] end IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]][lIli1iiiiiii1IliIl11i] = iillI1iI1il1I1i1IiI end elseif lIliliIIII1111iiii1Ii >= 15 then if lIliliIIII1111iiii1Ii < 16 then if IlI1lII1IlliIIIilli[6] == 244 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil - 1 lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] = { [8] = 5, [5] = (IlI1lII1IlliIIIilli[5] - 142) % 256, [1] = (IlI1lII1IlliIIIilli[1] - 142) % 256 } else IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[1]] end elseif lIliliIIII1111iiii1Ii ~= 17 then if IlI1lII1IlliIIIilli[6] == 125 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil - 1 lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] = { [8] = 18, [5] = (IlI1lII1IlliIIIilli[5] - 103) % 256, [6] = (IlI1lII1IlliIIIilli[1] - 103) % 256 } else for iI1IliI11l1iiI1ii1l = IlI1lII1IlliIIIilli[5], IlI1lII1IlliIIIilli[1] do IlIilIiill1lIiIlI11[iI1IliI11l1iiI1ii1l] = nil end end elseif IlI1lII1IlliIIIilli[1] == 78 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil - 1 lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] = { [8] = 10, [5] = (IlI1lII1IlliIIIilli[5] - 198) % 256, [1] = (IlI1lII1IlliIIIilli[6] - 198) % 256 } elseif not not IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] == (IlI1lII1IlliIIIilli[6] == 0) then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil + 1 end elseif lIliliIIII1111iiii1Ii >= 13 then if lIliliIIII1111iiii1Ii == 14 then local ili1iil11iI1II1i1ll = IlI1lII1IlliIIIilli[5] local lIlII11iIiIIllIiiIl1I = IlI1lII1IlliIIIilli[1] local IlI1IIIlili11l1l1i1 = IlI1lII1IlliIIIilli[6] local l1i1iil1liIIII11iI1, ii1i1l1iiIl11IlIIll, li1lIlIiIlilII11Ill if lIlII11iIiIIllIiiIl1I ~= 1 then if lIlII11iIiIIllIiiIl1I ~= 0 then ii1i1l1iiIl11IlIIll = ili1iil11iI1II1i1ll + lIlII11iIiIIllIiiIl1I - 1 else ii1i1l1iiIl11IlIIll = lI1IliIiI1lllI1iiiI end ii1i1l1iiIl11IlIIll, l1i1iil1liIIII11iI1 = lIlilIllIiII11l1lIiIl(IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll](l11IliiiillIllli111(IlIilIiill1lIiIlI11, ili1iil11iI1II1i1ll + 1, ii1i1l1iiIl11IlIIll))) else ii1i1l1iiIl11IlIIll, l1i1iil1liIIII11iI1 = lIlilIllIiII11l1lIiIl(IlIilIiill1lIiIlI11[ili1iil11iI1II1i1ll]()) end if IlI1IIIlili11l1l1i1 ~= 1 then if IlI1IIIlili11l1l1i1 ~= 0 then ii1i1l1iiIl11IlIIll = ili1iil11iI1II1i1ll + IlI1IIIlili11l1l1i1 - 2 lI1IliIiI1lllI1iiiI = ii1i1l1iiIl11IlIIll + 1 else ii1i1l1iiIl11IlIIll = ii1i1l1iiIl11IlIIll + ili1iil11iI1II1i1ll - 1 lI1IliIiI1lllI1iiiI = ii1i1l1iiIl11IlIIll end li1lIlIiIlilII11Ill = 0 for iI1IliI11l1iiI1ii1l = ili1iil11iI1II1i1ll, ii1i1l1iiIl11IlIIll do li1lIlIiIlilII11Ill = li1lIlIiIlilII11Ill + 1 IlIilIiill1lIiIlI11[iI1IliI11l1iiI1ii1l] = l1i1iil1liIIII11iI1[li1lIlIiIlilII11Ill] end else lI1IliIiI1lllI1iiiI = ili1iil11iI1II1i1ll - 1 end for iI1IliI11l1iiI1ii1l = lI1IliIiI1lllI1iiiI + 1, lIlIi1iI1I1iiii1ll1i1 do IlIilIiill1lIiIlI11[iI1IliI11l1iiI1ii1l] = nil end else l1IIi1ill11IIl111ll[IlI1lII1IlliIIIilli[3]] = IlIilIiill1lIiIlI11[IlI1lII1IlliIIIilli[5]] end elseif IlI1lII1IlliIIIilli[6] == 71 then ll1lIi1lIl1ii1llIil = ll1lIi1lIl1ii1llIil - 1 lIIl111l111Ii1lilIi[ll1lIi1lIl1ii1llIil] = { [8] = 23, [5] = (IlI1lII1IlliIIIilli[5] - 82) % 256, [1] = (IlI1lII1IlliIIIilli[1] - 82) % 256 } else local ili1iil11iI1II1i1ll = IlI1lII1IlliIIIilli[5] local lIlIlii1il111iiIlIiI1 = IlI1lII1IlliIIIilli[1] local iI1IliIIII1i1li1IIl = lIlIlii1il111iiIlIiI1 > 0 and lIlIlii1il111iiIlIiI1 - 1 or IllIi1IliiIi1iiilIl - lIl1iliIIi1Ii1I1I111l if iI1IliIIII1i1li1IIl < 0 then iI1IliIIII1i1li1IIl = -1 end for iI1IliI11l1iiI1ii1l = ili1iil11iI1II1i1ll, ili1iil11iI1II1i1ll + iI1IliIIII1i1li1IIl do IlIilIiill1lIiIlI11[iI1IliI11l1iiI1ii1l] = lIlII11iIiIIllIiiIl1I[lIl1iliIIi1Ii1I1I111l + (iI1IliI11l1iiI1ii1l - ili1iil11iI1II1i1ll) + 1] end if lIlIlii1il111iiIlIiI1 == 0 then lI1IliIiI1lllI1iiiI = ili1iil11iI1II1i1ll + iI1IliIIII1i1li1IIl for iI1IliI11l1iiI1ii1l = lI1IliIiI1lllI1iiiI + 1, lIlIi1iI1I1iiii1ll1i1 do IlIilIiill1lIiIlI11[iI1IliI11l1iiI1ii1l] = nil end end end end end local ill1i1ii1111lliI1ll, Illi1i11iIli11ill1i, lIli11lIiIii11lili1Ii, ll1l11l11l11I11ii1I = IIiI1l111iI111IIll1(li1lIlIiIlilII11Ill) if ill1i1ii1111lliI1ll then if lIli11lIiIii11lili1Ii then return l11IliiiillIllli111(IlIilIiill1lIiIlI11, lIli11lIiIii11lili1Ii, ll1l11l11l11I11ii1I) end else li1illIIIi1lI1l11li("Luraph Script:" .. (lIli1IIIiIiiilil11lii[ll1lIi1lIl1ii1llIil - 1] or "") .. ": " .. lIliIiIIi1i11I11l1Il1(Illi1i11iIli11ill1i), 0) end end illil1I1Iil11ililll(iiIIII1IilI1lil11I1, l1IIi1ill11IIl111ll) return iiIIII1IilI1lil11I1 end local Il11111IlI1iIIlI1Ii = il1liIil1ilIiiIllli() return iIilIi111I1Il1i1III(Il11111IlI1iIIlI1Ii, l1IIi1ill11IIl111ll)() end lIlI11i1iIiIlIIillllIII111Ii11l11I1l1()) 