local III11I1I11l111I1ll1 = assert local li1i1IIl1ilili1Ii1i = select local lIli1lll111111l1iiI1l = tonumber local lIliIi1liIIiIII1i11lI = unpack local lIlIIIii11Ilii1l11IlI = pcall local IIliIi1iIi1i1ilIlil = setfenv local iiIl1IiiilIll11l1Ii = setmetatable local i11llllliIiiIlIliIl = type local I11Iii1IIi11lilIl1I = getfenv local Il1l11iIIlIIl111Ill = tostring local IIIlIll1iiIi11iIlII = error local I1l11Ili1I11liiII1l = string.sub local il1I1IiII1llI11liIl = string.byte local I11l1i1lliiiliill1i = string.char local lI11ilillli111IIiIi = string.rep local I1I1l1lIIIiI1IiillI = string.gsub local iiiliiilI11iI1111li = string.match local IIllIll1I11I1lII1l1 = table.insert local IlI1IIill1IiIIll11I = il1I1IiII1llI11liIl(",", 1) local IlI1iI111iI1IIiI1lI, Iii1Ii111l111i1il1i = #{606}, #{ 3095, 5294, 4666, 1816, 798, 1551, 5987, 5227, 5606, 3825, 1504, 4632, 1884, 1589, 5241, 5193, 5701, 3197, 563, 664, 6585, 1399 } + IlI1IIill1IiIIll11I + 131005 local l1llilIiIIil1I1ii11 = {} local lIllil1Ii1IiIllI11IIi = 1 local Iliii1111iIilIIlIlI, lIl1IlI1I1IIIIiiiillI local function lIlil11llII111ilii1Ii(iI11iI1I111IIlliIli, Ii1Il1ilIiIIl11l11I) local lIl1iIlI1II1liiI1iiI1 iI11iI1I111IIlliIli = I1I1l1lIIIiI1IiillI(I1l11Ili1I11liiII1l(iI11iI1I111IIlliIli, 5), "..", function(lii1I1I1l1i1lil1i1I) if il1I1IiII1llI11liIl(lii1I1I1l1i1lil1i1I, 2) == 72 then lIl1iIlI1II1liiI1iiI1 = lIli1lll111111l1iiI1l(I1l11Ili1I11liiII1l(lii1I1I1l1i1lil1i1I, 1, 1)) return "" else local iliI1li1IIiIl1IIIl1 = I11l1i1lliiiliill1i(lIli1lll111111l1iiI1l(lii1I1I1l1i1lil1i1I, 16)) if lIl1iIlI1II1liiI1iiI1 then local llIl1lIIlIIiii1IiIi = lI11ilillli111IIiIi(iliI1li1IIiIl1IIIl1, lIl1iIlI1II1liiI1iiI1) lIl1iIlI1II1liiI1iiI1 = nil return llIl1lIIlIIiii1IiIi else return iliI1li1IIiIl1IIIl1 end end end) local function llilliI1I1li1I1IiIi() local iIi1iIil1Iilil1liIi = il1I1IiII1llI11liIl(iI11iI1I111IIlliIli, lIllil1Ii1IiIllI11IIi, lIllil1Ii1IiIllI11IIi) lIllil1Ii1IiIllI11IIi = lIllil1Ii1IiIllI11IIi + 1 return iIi1iIil1Iilil1liIi end local function i1Ii1iIIii1lliIiI1I() local iIi1iIil1Iilil1liIi, iliI1li1IIiIl1IIIl1, llIl1lIIlIIiii1IiIi, ilIillI1i1llIIIi1Il = il1I1IiII1llI11liIl(iI11iI1I111IIlliIli, lIllil1Ii1IiIllI11IIi, lIllil1Ii1IiIllI11IIi + 3) lIllil1Ii1IiIllI11IIi = lIllil1Ii1IiIllI11IIi + 4 return ilIillI1i1llIIIi1Il * 16777216 + llIl1lIIlIIiii1IiIi * 65536 + iliI1li1IIiIl1IIIl1 * 256 + iIi1iIil1Iilil1liIi end local function I1ilil1liIII11ilIlI(lIlIiiiIi1iiIiiIIIIl1, lIii1l11I1IIil1lIlI, iiiIl1IIIIi1IilI1I1) if iiiIl1IIIIi1IilI1I1 then local iIIIiI1i11I1lIiiI11, Ii1i1II1lIi11ll11I1 = 0, 0 for lIlII1iIi1IilIllill1i = lIii1l11I1IIil1lIlI, iiiIl1IIIIi1IilI1I1 do iIIIiI1i11I1lIiiI11 = iIIIiI1i11I1lIiiI11 + 2 ^ Ii1i1II1lIi11ll11I1 * I1ilil1liIII11ilIlI(lIlIiiiIi1iiIiiIIIIl1, lIlII1iIi1IilIllill1i) Ii1i1II1lIi11ll11I1 = Ii1i1II1lIi11ll11I1 + 1 end return iIIIiI1i11I1lIiiI11 else local lIllli1lIiI11lI1ilIIl = 2 ^ (lIii1l11I1IIil1lIlI - 1) return lIllli1lIiI11lI1ilIIl <= lIlIiiiIi1iiIiiIIIIl1 % (lIllli1lIiI11lI1ilIIl + lIllli1lIiI11lI1ilIIl) and 1 or 0 end end local function iiilIi11iil1liIi1l1() local iIi1iIil1Iilil1liIi, iliI1li1IIiIl1IIIl1 = i1Ii1iIIii1lliIiI1I(), i1Ii1iIIii1lliIiI1I() if iIi1iIil1Iilil1liIi == 0 and iliI1li1IIiIl1IIIl1 == 0 then return 0 end return (-2 * I1ilil1liIII11ilIlI(iliI1li1IIiIl1IIIl1, 32) + 1) * 2 ^ (I1ilil1liIII11ilIlI(iliI1li1IIiIl1IIIl1, 21, 31) - 1023) * ((I1ilil1liIII11ilIlI(iliI1li1IIiIl1IIIl1, 1, 20) * 4294967296 + iIi1iIil1Iilil1liIi) / 4503599627370496 + 1) end local llll1lII1lii1li1il1 = bit or bit32 local I1lil1li11IiII1IiII = llll1lII1lii1li1il1 and llll1lII1lii1li1il1.bxor or function(iIi1iIil1Iilil1liIi, iliI1li1IIiIl1IIIl1) local lIl11I1I1iIIIIIlIlIII = 1 local llIl1lIIlIIiii1IiIi = 0 while iIi1iIil1Iilil1liIi > 0 and iliI1li1IIiIl1IIIl1 > 0 do local IIl1iiIIlllll111i1i = iIi1iIil1Iilil1liIi % 2 local lIllill1lli1IlIiiIIIl = iliI1li1IIiIl1IIIl1 % 2 if IIl1iiIIlllll111i1i ~= lIllill1lli1IlIiiIIIl then llIl1lIIlIIiii1IiIi = llIl1lIIlIIiii1IiIi + lIl11I1I1iIIIIIlIlIII end iIi1iIil1Iilil1liIi = (iIi1iIil1Iilil1liIi - IIl1iiIIlllll111i1i) / 2 iliI1li1IIiIl1IIIl1 = (iliI1li1IIiIl1IIIl1 - lIllill1lli1IlIiiIIIl) / 2 lIl11I1I1iIIIIIlIlIII = lIl11I1I1iIIIIIlIlIII * 2 end if iIi1iIil1Iilil1liIi < iliI1li1IIiIl1IIIl1 then iIi1iIil1Iilil1liIi = iliI1li1IIiIl1IIIl1 end while iIi1iIil1Iilil1liIi > 0 do local IIl1iiIIlllll111i1i = iIi1iIil1Iilil1liIi % 2 if IIl1iiIIlllll111i1i > 0 then llIl1lIIlIIiii1IiIi = llIl1lIIlIIiii1IiIi + lIl11I1I1iIIIIIlIlIII end iIi1iIil1Iilil1liIi = (iIi1iIil1Iilil1liIi - IIl1iiIIlllll111i1i) / 2 lIl11I1I1iIIIIIlIlIII = lIl11I1I1iIIIIIlIlIII * 2 end return llIl1lIIlIIiii1IiIi end local function I1lliIlI1lIIii1lII1(i1i1illlIl1l11iiiI1) local lIlIiIllI1IliI11II1Ii = { il1I1IiII1llI11liIl(iI11iI1I111IIlliIli, lIllil1Ii1IiIllI11IIi, lIllil1Ii1IiIllI11IIi + 3) } lIllil1Ii1IiIllI11IIi = lIllil1Ii1IiIllI11IIi + 4 local iIi1iIil1Iilil1liIi = I1lil1li11IiII1IiII(lIlIiIllI1IliI11II1Ii[1], lIl1IlI1I1IIIIiiiillI) local iliI1li1IIiIl1IIIl1 = I1lil1li11IiII1IiII(lIlIiIllI1IliI11II1Ii[2], lIl1IlI1I1IIIIiiiillI) local llIl1lIIlIIiii1IiIi = I1lil1li11IiII1IiII(lIlIiIllI1IliI11II1Ii[3], lIl1IlI1I1IIIIiiiillI) local ilIillI1i1llIIIi1Il = I1lil1li11IiII1IiII(lIlIiIllI1IliI11II1Ii[4], lIl1IlI1I1IIIIiiiillI) lIl1IlI1I1IIIIiiiillI = (89 * lIl1IlI1I1IIIIiiiillI + i1i1illlIl1l11iiiI1) % 256 return ilIillI1i1llIIIi1Il * 16777216 + llIl1lIIlIIiii1IiIi * 65536 + iliI1li1IIiIl1IIIl1 * 256 + iIi1iIil1Iilil1liIi end local function llilIi11IlllIi1Ii1I(lI1Il1li11iI1l11I1i) local IiIiilII1I1I1illiI1 = i1Ii1iIIii1lliIiI1I() local lili1I1i1IIlIiIi1ll = "" for lIlII1iIi1IilIllill1i = IlI1iI111iI1IIiI1lI, IiIiilII1I1I1illiI1 do lili1I1i1IIlIiIi1ll = lili1I1i1IIlIiIi1ll .. I11l1i1lliiiliill1i(I1lil1li11IiII1IiII(il1I1IiII1llI11liIl(iI11iI1I111IIlliIli, lIllil1Ii1IiIllI11IIi + lIlII1iIi1IilIllill1i - 1), Iliii1111iIilIIlIlI)) Iliii1111iIilIIlIlI = (lI1Il1li11iI1l11I1i * Iliii1111iIilIIlIlI + 89) % 256 end lIllil1Ii1IiIllI11IIi = lIllil1Ii1IiIllI11IIi + IiIiilII1I1I1illiI1 return lili1I1i1IIlIiIi1ll end Iliii1111iIilIIlIlI = llilliI1I1li1I1IiIi() lIl1IlI1I1IIIIiiiillI = llilliI1I1li1I1IiIi() local II1i1iIIl11I1liI1il = {} for lIlII1iIi1IilIllill1i = IlI1iI111iI1IIiI1lI, llilliI1I1li1I1IiIi() do local il1iiil1l1lil1I1IiI = llilliI1I1li1I1IiIi() local I1ilI11iil1I1llIIIl = (lIlII1iIi1IilIllill1i - 1) * 2 II1i1iIIl11I1liI1il[I1ilI11iil1I1llIIIl] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, 1, 4) II1i1iIIl11I1liI1il[I1ilI11iil1I1llIIIl + 1] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, 5, 8) end local function i11I111III1ll1IIiI1() local i1llii1lll1ilIlll1I = { {}, {}, nil, {}, nil, {}, nil } i1llii1lll1ilIlll1I[5] = llilliI1I1li1I1IiIi() local lil1II1iiIli1l1IIll = i1Ii1iIIii1lliIiI1I() - (#{ 1767, 3179, 3822, 1515, 897, 2237, 6421, 2702, 6138, 6067, 1359, 4836, 5651, 2264, 377, 1886, 70, 1018, 531, 2118, 6590, 4087, 6348 } + IlI1IIill1IiIIll11I + 133654) local II1I1ilII1iIlil1lli = llilliI1I1li1I1IiIi() for lIlII1iIi1IilIllill1i = IlI1iI111iI1IIiI1lI, lil1II1iiIli1l1IIll do local lIlilIIlIlli1iIi11iII local i11llllliIiiIlIliIl = llilliI1I1li1I1IiIi() if i11llllliIiiIlIliIl == #{ 3544, 4603, 3932, 3381, 4773, 576, 3674, 6435, 574, 6220, 5741, 1218, 3931, 4934, 3043, 3902, 6657, 1002, 6811, 806, 6877, 3282, 6372, 6880 } + IlI1IIill1IiIIll11I + 95 then lIlilIIlIlli1iIi11iII = I1l11Ili1I11liiII1l(llilIi11IlllIi1Ii1I(II1I1ilII1iIlil1lli), #{ 2155, 3744, 4478, 5191 }) end if i11llllliIiiIlIliIl == #{ 2299, 4735, 2935, 2603, 4458, 792, 601, 2342, 2882, 3157, 6125, 3306, 5053, 6318, 3243, 2439, 6270, 6639, 3271, 1031, 6138, 4185 } + IlI1IIill1IiIIll11I + 41 then lIlilIIlIlli1iIi11iII = I1l11Ili1I11liiII1l(llilIi11IlllIi1Ii1I(II1I1ilII1iIlil1lli), #{ 2047, 1705, 2298, 5562, 5263, 4104 }) end if i11llllliIiiIlIliIl == #{ 1108, 5275, 5644, 5407, 229, 6580, 6595, 4357, 681, 4707, 4352, 3724, 3219, 1928, 1365, 4091, 4585, 2081, 747, 6094 } + IlI1IIill1IiIIll11I + 175 then lIlilIIlIlli1iIi11iII = #{ 6079, 3400, 6357, 973, 3847, 938, 3015, 6909, 1942, 1792, 3977, 3357, 1810, 5090, 4472, 947, 575, 1257, 4392, 3492, 6511, 5740 } + IlI1IIill1IiIIll11I + 8141 == #{ 1201, 2918, 3986, 3079, 2657, 6857, 1627, 2817, 294, 6567, 3138, 4376, 1660, 3043, 4634, 242, 1704, 3080, 6194, 2671 } + IlI1IIill1IiIIll11I + 89529 end if i11llllliIiiIlIliIl == #{ 907, 3312, 3626, 613, 4034, 857, 189, 2157, 3261, 2043, 4347, 3510, 3708, 1746, 1540, 5312, 1552, 3538, 4383, 1958, 468, 4522, 6063 } + IlI1IIill1IiIIll11I + 93 then lIlilIIlIlli1iIi11iII = I1l11Ili1I11liiII1l(llilIi11IlllIi1Ii1I(#{ 6227, 3308, 4141, 6014, 3370, 5233, 5423, 6829, 2829, 5690, 5340, 3144, 402, 2522, 2716, 3608, 3904, 5097, 5031, 962, 466, 6152, 5998, 4812 } + IlI1IIill1IiIIll11I + 52), #{ 5622, 3937, 4428, 2043 }) end if i11llllliIiiIlIliIl == #{ 5690, 1242, 6399, 1214, 6891, 1119, 4252, 4717, 1116, 4849, 6198, 2483, 5816, 6889, 6169, 1622, 3310, 2267, 6037, 6690, 5412, 6182, 6862, 2389 } + IlI1IIill1IiIIll11I + -14 then lIlilIIlIlli1iIi11iII = #{ 6303, 3876, 879, 5419, 6221, 480, 6490, 3723, 5757, 6605, 5373, 5089, 3483, 670, 10, 4417, 1652, 4464, 5339, 3092, 3289, 4305, 6153 } + IlI1IIill1IiIIll11I + 59277 == #{ 6303, 3876, 879, 5419, 6221, 480, 6490, 3723, 5757, 6605, 5373, 5089, 3483, 670, 10, 4417, 1652, 4464, 5339, 3092, 3289, 4305, 6153 } + IlI1IIill1IiIIll11I + 59277 end if i11llllliIiiIlIliIl == #{ 2393, 4100, 4300, 4162, 4768, 4098, 6566, 2192, 2541, 1981, 3506, 3323, 176, 4883, 4465, 4876, 5687, 6714, 5092, 2591, 557, 6853, 1921 } + IlI1IIill1IiIIll11I + 47 then lIlilIIlIlli1iIi11iII = i1Ii1iIIii1lliIiI1I() end if i11llllliIiiIlIliIl == #{ 4321, 2953, 5126, 2222, 6099, 5224, 350, 5529, 5343, 5966, 6510, 5050, 830, 3857, 5458, 2843, 6481, 3235, 5730, 265, 3015, 217 } + IlI1IIill1IiIIll11I + -36 then lIlilIIlIlli1iIi11iII = I1l11Ili1I11liiII1l(llilIi11IlllIi1Ii1I(#{ 6227, 3308, 4141, 6014, 3370, 5233, 5423, 6829, 2829, 5690, 5340, 3144, 402, 2522, 2716, 3608, 3904, 5097, 5031, 962, 466, 6152, 5998, 4812 } + IlI1IIill1IiIIll11I + 52), #{ 5622, 3937, 4428, 2043 }) end if i11llllliIiiIlIliIl == #{ 507, 1819, 3160, 181, 2698, 6187, 4105, 253, 6818, 2520, 1283, 6163, 732, 3342, 1434, 2600, 412, 6533, 61, 5068, 6212, 6720 } + IlI1IIill1IiIIll11I + 178 then lIlilIIlIlli1iIi11iII = iiilIi11iil1liIi1l1() end if i11llllliIiiIlIliIl == #{ 4295, 4362, 3416, 5299, 5065, 3980, 5725, 5855, 190, 5512, 5992, 223, 5780, 451, 1905, 5279, 3248, 1348, 3607, 319, 5059 } + IlI1IIill1IiIIll11I + 127 then lIlilIIlIlli1iIi11iII = llilliI1I1li1I1IiIi() + i1Ii1iIIii1lliIiI1I() + iiilIi11iil1liIi1l1() end i1llii1lll1ilIlll1I[4][lIlII1iIi1IilIllill1i - IlI1iI111iI1IIiI1lI] = lIlilIIlIlli1iIi11iII end local lIllilliI1111Il1l11 = i1Ii1iIIii1lliIiI1I() - (#{ 5922, 3308, 2617, 4905, 3105, 2930, 889, 5791, 2076, 1801, 6348, 3432, 3936, 2442, 6401, 6089, 4965, 2628, 3935, 4076, 823 } + IlI1IIill1IiIIll11I + 133638) local iilII1iI11Iii11iIII = llilliI1I1li1I1IiIi() for lIlII1iIi1IilIllill1i = IlI1iI111iI1IIiI1lI, lIllilliI1111Il1l11 do local l1l1IillI11I1l11ilI = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil } local il1iiil1l1lil1I1IiI = I1lliIlI1lIIii1lII1(iilII1iI11Iii11iIII) l1l1IillI11I1l11ilI[5] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, #{ 5957, 2113, 1552, 2983, 83, 1249, 3313, 6833, 4872, 845, 3404, 5708, 3711, 2929, 2767, 4515, 4448, 4527, 6022 }, #{ 475, 313, 4870, 1732, 1966, 1896, 4413, 5864, 4670, 6670, 5020, 4923, 4775, 4917, 2677, 5555, 4563, 4987, 3283, 1950, 6758, 4498, 1177, 4774 } + IlI1IIill1IiIIll11I + -42) l1l1IillI11I1l11ilI[10] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, #{ 4137, 1010, 1954, 2934, 807, 5582, 1356, 2812, 6877, 3596 }, #{ 1483, 5315, 3794, 110, 623, 167, 2266, 1248, 3927, 2268, 6128, 3914, 5574, 6942, 3958, 483, 2063, 5230 }) l1l1IillI11I1l11ilI[3] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, #{4810}, #{ 4806, 583, 310, 2536, 2613, 1931, 302, 506, 5585, 1594, 2088, 6550, 5903, 2092, 6632, 2775, 1078, 1424 }) l1l1IillI11I1l11ilI[1] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, #{5304}, #{ 4257, 2708, 2048, 6947, 2497, 1794, 6635, 2797, 6148 }) l1l1IillI11I1l11ilI[9] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, #{ 5960, 4180, 4585, 6267, 6221, 1895, 5450, 1543, 6748, 2680, 6099, 6779, 1508, 1053, 5726, 3939, 896, 4189, 1424, 6419, 6854, 1409, 17, 5806 } + IlI1IIill1IiIIll11I + -41, #{ 2136, 1447, 5828, 6221, 42, 1867, 3823, 4476, 4427, 883, 5592, 6017, 6438, 686, 5110, 5757, 3117, 5458, 667, 1562 } + IlI1IIill1IiIIll11I + -32) l1l1IillI11I1l11ilI[91361] = I1ilil1liIII11ilIlI(il1iiil1l1lil1I1IiI, #{1108}, #{ 353, 1640, 2907, 931, 3716, 4290, 3629, 2203, 2728, 4460, 2221, 862, 6061, 4676, 4664, 1641, 4886, 6659 }) i1llii1lll1ilIlll1I[2][lIlII1iIi1IilIllill1i] = l1l1IillI11I1l11ilI end for lIlII1iIi1IilIllill1i = IlI1iI111iI1IIiI1lI, lIllilliI1111Il1l11 do local l1l1IillI11I1l11ilI = i1llii1lll1ilIlll1I[2][lIlII1iIi1IilIllill1i] local li1llII1IiIlIIl1i1i = II1i1iIIl11I1liI1il[l1l1IillI11I1l11ilI[9]] if li1llII1IiIlIIl1i1i == #{ 5086, 221, 3442 } then if l1l1IillI11I1l11ilI[1] > 255 then l1l1IillI11I1l11ilI[2] = true l1l1IillI11I1l11ilI[7] = i1llii1lll1ilIlll1I[4][l1l1IillI11I1l11ilI[1] - 256] end if l1l1IillI11I1l11ilI[10] > 255 then l1l1IillI11I1l11ilI[6] = true l1l1IillI11I1l11ilI[4] = i1llii1lll1ilIlll1I[4][l1l1IillI11I1l11ilI[10] - 256] end end if li1llII1IiIlIIl1i1i == #{2487} and l1l1IillI11I1l11ilI[1] > 255 then l1l1IillI11I1l11ilI[2] = true l1l1IillI11I1l11ilI[7] = i1llii1lll1ilIlll1I[4][l1l1IillI11I1l11ilI[1] - 256] end if li1llII1IiIlIIl1i1i == #{1542, 1877} and l1l1IillI11I1l11ilI[10] > 255 then l1l1IillI11I1l11ilI[6] = true l1l1IillI11I1l11ilI[4] = i1llii1lll1ilIlll1I[4][l1l1IillI11I1l11ilI[10] - 256] end if li1llII1IiIlIIl1i1i == #{ 77, 2412, 4107, 63 } then l1l1IillI11I1l11ilI[8] = i1llii1lll1ilIlll1I[4][l1l1IillI11I1l11ilI[3]] end end local lil1II1iiIli1l1IIll = i1Ii1iIIii1lliIiI1I() for lIlII1iIi1IilIllill1i = IlI1iI111iI1IIiI1lI, lil1II1iiIli1l1IIll do i1llii1lll1ilIlll1I[1][lIlII1iIi1IilIllill1i] = i1Ii1iIIii1lliIiI1I() end i1llii1lll1ilIlll1I[3] = llilliI1I1li1I1IiIi() local lil1II1iiIli1l1IIll = i1Ii1iIIii1lliIiI1I() for lIlII1iIi1IilIllill1i = IlI1iI111iI1IIiI1lI, lil1II1iiIli1l1IIll do i1llii1lll1ilIlll1I[6][lIlII1iIi1IilIllill1i - IlI1iI111iI1IIiI1lI] = i11I111III1ll1IIiI1() end llilliI1I1li1I1IiIi() i1Ii1iIIii1lliIiI1I() i1llii1lll1ilIlll1I[7] = llilliI1I1li1I1IiIi() return i1llii1lll1ilIlll1I end local function ii1l1ll1l1IlIIi1l11(i1llii1lll1ilIlll1I, Ii1Il1ilIiIIl11l11I, i11iIlIiilili1lil11) local lillIli1i1I1IIlI1lI, Il11iiI1iil1I11iI1I = 17, 23 local lIl1lilI1I1iliIiil1ii = i1llii1lll1ilIlll1I[2] local lIl11II1ll1i1lllIiil1 = 7 local lIliii1iIilIl1l1l1i = i1llii1lll1ilIlll1I[6] local li11ii1lliIliiil1Ii = i1llii1lll1ilIlll1I[3] local li1i1lllIiIli1ii1i1 = i1llii1lll1ilIlll1I[5] local iIIiliilI1IIll111il = 9 local IliIl1I1IiI111iIiI1 = i1llii1lll1ilIlll1I[1] local lIliliIl1l1lI1Iil1IiI = 1 local function I11iiII1i1llIlIIiIl(...) local lIllillllIilIi1liiII1 = 0 local lIii11il11iiii1IliI = { lIliIi1liIIiIII1i11lI({}, 1, li1i1lllIiIli1ii1i1) } local lll1llIli1lIiii1il1 = 1 local i1I1liIiIii1111I1I1 = {} local lIllIIII1II1iilil11I1 = {} local Ii1Il1ilIiIIl11l11I = I11Iii1IIi11lilIl1I() local l11ilI1lIi11IlIlI11 = { ... } local lIllil1IiiIii1Il1iiii = #l11ilI1lIi11IlIlI11 - 1 for lIlII1iIi1IilIllill1i = 0, lIllil1IiiIii1Il1iiii do if lIlII1iIi1IilIllill1i < li11ii1lliIliiil1Ii then lIii11il11iiii1IliI[lIlII1iIi1IilIllill1i] = l11ilI1lIi11IlIlI11[lIlII1iIi1IilIllill1i + 1] end end local function iilIlii1i1Iil11li11(...) local llIl1lIIlIIiii1IiIi = li1i1IIl1ilili1Ii1i("#", ...) local lIliIi1llI1Ii1IIIiI1I = { ... } return llIl1lIIlIIiii1IiIi, lIliIi1llI1Ii1IIIiI1I end local function lIlIlll11111I111illii() while true do local lIlIil1I1illlIi1iIIlI = lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] local lIilIl1i1II1i1iIiI1 = lIlIil1I1illlIi1iIIlI[9] lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 + 1 if lIilIl1i1II1i1iIiI1 < 13 then if lIilIl1i1II1i1iIiI1 < 6 then if lIilIl1i1II1i1iIiI1 < 3 then if lIilIl1i1II1i1iIiI1 >= 1 then if lIilIl1i1II1i1iIiI1 ~= 2 then lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = lIlIil1I1illlIi1iIIlI[1] ~= 0 if lIlIil1I1illlIi1iIIlI[10] ~= 0 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 + 1 end else lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = Ii1Il1ilIiIIl11l11I[lIlIil1I1illlIi1iIIlI[8]] end else i1I1liIiIii1111I1I1[lIii11il11iiii1IliI] = nil local lIllIlliii1iI1ilIiI1i = lIlIil1I1illlIi1iIIlI[5] local lIlIII1il11IiI1Il1Il1 = lIlIil1I1illlIi1iIIlI[1] if lIlIII1il11IiI1Il1Il1 == 1 then return true end local lIl11i11iI1l1I1II11il = lIllIlliii1iI1ilIiI1i + lIlIII1il11IiI1Il1Il1 - 2 if lIlIII1il11IiI1Il1Il1 == 0 then lIl11i11iI1l1I1II11il = lIllillllIilIi1liiII1 end return true, lIllIlliii1iI1ilIiI1i, lIl11i11iI1l1I1II11il end elseif lIilIl1i1II1i1iIiI1 < 4 then local lIllIlliii1iI1ilIiI1i = lIlIil1I1illlIi1iIIlI[5] local l11ilI1lIi11IlIlI11 = lIlIil1I1illlIi1iIIlI[1] local IillIIII11li1llIIII = lIlIil1I1illlIi1iIIlI[10] local ll11II1I1111iIi1Il1, lIl11i11iI1l1I1II11il, lIlIlll11111I111illii if l11ilI1lIi11IlIlI11 ~= 1 then if l11ilI1lIi11IlIlI11 ~= 0 then lIl11i11iI1l1I1II11il = lIllIlliii1iI1ilIiI1i + l11ilI1lIi11IlIlI11 - 1 else lIl11i11iI1l1I1II11il = lIllillllIilIi1liiII1 end lIl11i11iI1l1I1II11il, ll11II1I1111iIi1Il1 = iilIlii1i1Iil11li11(lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i](lIliIi1liIIiIII1i11lI(lIii11il11iiii1IliI, lIllIlliii1iI1ilIiI1i + 1, lIl11i11iI1l1I1II11il))) else lIl11i11iI1l1I1II11il, ll11II1I1111iIi1Il1 = iilIlii1i1Iil11li11(lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i]()) end if IillIIII11li1llIIII ~= 1 then if IillIIII11li1llIIII ~= 0 then lIl11i11iI1l1I1II11il = lIllIlliii1iI1ilIiI1i + IillIIII11li1llIIII - 2 lIllillllIilIi1liiII1 = lIl11i11iI1l1I1II11il + 1 else lIl11i11iI1l1I1II11il = lIl11i11iI1l1I1II11il + lIllIlliii1iI1ilIiI1i - 1 lIllillllIilIi1liiII1 = lIl11i11iI1l1I1II11il end lIlIlll11111I111illii = 0 for lIlII1iIi1IilIllill1i = lIllIlliii1iI1ilIiI1i, lIl11i11iI1l1I1II11il do lIlIlll11111I111illii = lIlIlll11111I111illii + 1 lIii11il11iiii1IliI[lIlII1iIi1IilIllill1i] = ll11II1I1111iIi1Il1[lIlIlll11111I111illii] end else lIllillllIilIi1liiII1 = lIllIlliii1iI1ilIiI1i - 1 end for lIlII1iIi1IilIllill1i = lIllillllIilIi1liiII1 + 1, li1i1lllIiIli1ii1i1 do lIii11il11iiii1IliI[lIlII1iIi1IilIllill1i] = nil end elseif lIilIl1i1II1i1iIiI1 == 5 then if lIlIil1I1illlIi1iIIlI[10] == 0 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 - 1 lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] = { [9] = 17, [5] = (lIlIil1I1illlIi1iIIlI[5] - 162) % 256, [1] = (lIlIil1I1illlIi1iIIlI[1] - 162) % 256 } else for lIlII1iIi1IilIllill1i = lIlIil1I1illlIi1iIIlI[5], lIlIil1I1illlIi1iIIlI[1] do lIii11il11iiii1IliI[lIlII1iIi1IilIllill1i] = nil end end else local llIl1lIIlIIiii1IiIi if lIlIil1I1illlIi1iIIlI[6] then llIl1lIIlIIiii1IiIi = lIlIil1I1illlIi1iIIlI[4] else llIl1lIIlIIiii1IiIi = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[10]] end lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]][llIl1lIIlIIiii1IiIi] end elseif lIilIl1i1II1i1iIiI1 < 9 then if lIilIl1i1II1i1iIiI1 >= 7 then if lIilIl1i1II1i1iIiI1 == 8 then if lIlIil1I1illlIi1iIIlI[10] == 123 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 - 1 lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] = { [9] = 5, [5] = (lIlIil1I1illlIi1iIIlI[5] - 28) % 256, [1] = (lIlIil1I1illlIi1iIIlI[1] - 28) % 256 } else lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = -lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] end else local i1IIiili1IIlil1lI1i = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] for lIlII1iIi1IilIllill1i = lIlIil1I1illlIi1iIIlI[1] + 1, lIlIil1I1illlIi1iIIlI[10] do i1IIiili1IIlil1lI1i = i1IIiili1IIlil1lI1i .. lIii11il11iiii1IliI[lIlII1iIi1IilIllill1i] end lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = i1IIiili1IIlil1lI1i end else local I1ilI11iil1I1llIIIl = (lIlIil1I1illlIi1iIIlI[10] - 1) * 50 local lll1l11IIiIiiIiil11 = lIlIil1I1illlIi1iIIlI[1] if lll1l11IIiIiiIiil11 == 0 then lll1l11IIiIiiIiil11 = lIllillllIilIi1liiII1 - lIlIil1I1illlIi1iIIlI[5] end for lIlII1iIi1IilIllill1i = 1, lll1l11IIiIiiIiil11 do lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]][I1ilI11iil1I1llIIIl + lIlII1iIi1IilIllill1i] = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5] + lIlII1iIi1IilIllill1i] end end elseif lIilIl1i1II1i1iIiI1 >= 11 then if lIilIl1i1II1i1iIiI1 ~= 12 then if lIlIil1I1illlIi1iIIlI[10] == 162 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 - 1 lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] = { [9] = 0, [5] = (lIlIil1I1illlIi1iIIlI[5] - 124) % 256, [1] = (lIlIil1I1illlIi1iIIlI[1] - 124) % 256 } else lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = #lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] end else lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = lIlIil1I1illlIi1iIIlI[8] end elseif lIilIl1i1II1i1iIiI1 ~= 10 then if not not lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] == (lIlIil1I1illlIi1iIIlI[10] == 0) then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 + 1 end elseif lIlIil1I1illlIi1iIIlI[10] == 83 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 - 1 lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] = { [9] = 9, [5] = (lIlIil1I1illlIi1iIIlI[5] - 172) % 256, [10] = (lIlIil1I1illlIi1iIIlI[1] - 172) % 256 } else i11iIlIiilili1lil11[lIlIil1I1illlIi1iIIlI[1]] = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] end elseif lIilIl1i1II1i1iIiI1 < 19 then if lIilIl1i1II1i1iIiI1 >= 16 then if lIilIl1i1II1i1iIiI1 < 17 then local iliI1li1IIiIl1IIIl1, llIl1lIIlIIiii1IiIi if lIlIil1I1illlIi1iIIlI[2] then iliI1li1IIiIl1IIIl1 = lIlIil1I1illlIi1iIIlI[7] else iliI1li1IIiIl1IIIl1 = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] end if lIlIil1I1illlIi1iIIlI[6] then llIl1lIIlIIiii1IiIi = lIlIil1I1illlIi1iIIlI[4] else llIl1lIIlIIiii1IiIi = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[10]] end if iliI1li1IIiIl1IIIl1 == llIl1lIIlIIiii1IiIi ~= (lIlIil1I1illlIi1iIIlI[5] ~= 0) then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 + 1 end elseif lIilIl1i1II1i1iIiI1 ~= 18 then lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] elseif lIlIil1I1illlIi1iIIlI[10] == 28 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 - 1 lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] = { [9] = 23, [5] = (lIlIil1I1illlIi1iIIlI[5] - 105) % 256, [1] = (lIlIil1I1illlIi1iIIlI[1] - 105) % 256 } else local IIliIii1l1111iIIlii = lIlIil1I1illlIi1iIIlI[5] local IiiIll1iII1i1iIlli1 = {} for lIlI1IIlliIil1lIl1II1, iiiii1I11IIliI1ilIl in pairs(i1I1liIiIii1111I1I1[lIii11il11iiii1IliI]) do for lIlI1IIlliIil1lIl1II1, IllIiIi1l11I1i1l11I in pairs(iiiii1I11IIliI1ilIl) do if IllIiIi1l11I1i1l11I[1] == lIii11il11iiii1IliI and IIliIii1l1111iIIlii <= IllIiIi1l11I1i1l11I[2] then local lIlIllil1li1Illi1ii11 = IllIiIi1l11I1i1l11I[2] if not IiiIll1iII1i1iIlli1[lIlIllil1li1Illi1ii11] then ii1l1ll1l1IlIIi1l11(lIllIIII1II1iilil11I1, lIii11il11iiii1IliI[lIlIllil1li1Illi1ii11]) IiiIll1iII1i1iIlli1[lIlIllil1li1Illi1ii11] = #lIllIIII1II1iilil11I1 end IllIiIi1l11I1i1l11I[1] = lIllIIII1II1iilil11I1 IllIiIi1l11I1i1l11I[2] = IiiIll1iII1i1iIlli1[lIlIllil1li1Illi1ii11] end end end end elseif lIilIl1i1II1i1iIiI1 < 14 then Ii1Il1ilIiIIl11l11I[lIlIil1I1illlIi1iIIlI[8]] = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] elseif lIilIl1i1II1i1iIiI1 == 15 then lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = { lIliIi1liIIiIII1i11lI(l1llilIiIIil1I1ii11, 1, lIlIil1I1illlIi1iIIlI[1] == 0 and 255 or lIlIil1I1illlIi1iIIlI[1]) } else local lI1lI1i1I11III11i1l = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] local llIl1lIIlIIiii1IiIi if lIlIil1I1illlIi1iIIlI[6] then llIl1lIIlIIiii1IiIi = lIlIil1I1illlIi1iIIlI[4] else llIl1lIIlIIiii1IiIi = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[10]] end lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5] + 1] = lI1lI1i1I11III11i1l lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = lI1lI1i1I11III11i1l[llIl1lIIlIIiii1IiIi] end elseif lIilIl1i1II1i1iIiI1 < 22 then if lIilIl1i1II1i1iIiI1 >= 20 then if lIilIl1i1II1i1iIiI1 ~= 21 then local iliI1li1IIiIl1IIIl1, llIl1lIIlIIiii1IiIi if lIlIil1I1illlIi1iIIlI[2] then iliI1li1IIiIl1IIIl1 = lIlIil1I1illlIi1iIIlI[7] else iliI1li1IIiIl1IIIl1 = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] end if lIlIil1I1illlIi1iIIlI[6] then llIl1lIIlIIiii1IiIi = lIlIil1I1illlIi1iIIlI[4] else llIl1lIIlIIiii1IiIi = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[10]] end lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]][iliI1li1IIiIl1IIIl1] = llIl1lIIlIIiii1IiIi elseif lIlIil1I1illlIi1iIIlI[10] == 203 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 - 1 lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] = { [9] = 10, [5] = (lIlIil1I1illlIi1iIIlI[5] - 173) % 256, [1] = (lIlIil1I1illlIi1iIIlI[1] - 173) % 256 } elseif lIlIil1I1illlIi1iIIlI[10] == 148 then lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 - 1 lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] = { [9] = 22, [5] = (lIlIil1I1illlIi1iIIlI[5] - 109) % 256, [10] = (lIlIil1I1illlIi1iIIlI[1] - 109) % 256 } else local lIllIlliii1iI1ilIiI1i = lIlIil1I1illlIi1iIIlI[5] local lil1II1iiIli1l1IIll = lIlIil1I1illlIi1iIIlI[1] local l1lIillIiiIiiiii1l1 = lil1II1iiIli1l1IIll > 0 and lil1II1iiIli1l1IIll - 1 or lIllil1IiiIii1Il1iiii - li11ii1lliIliiil1Ii if l1lIillIiiIiiiii1l1 < 0 then l1lIillIiiIiiiii1l1 = -1 end for lIlII1iIi1IilIllill1i = lIllIlliii1iI1ilIiI1i, lIllIlliii1iI1ilIiI1i + l1lIillIiiIiiiii1l1 do lIii11il11iiii1IliI[lIlII1iIi1IilIllill1i] = l11ilI1lIi11IlIlI11[li11ii1lliIliiil1Ii + (lIlII1iIi1IilIllill1i - lIllIlliii1iI1ilIiI1i) + 1] end if lil1II1iiIli1l1IIll == 0 then lIllillllIilIi1liiII1 = lIllIlliii1iI1ilIiI1i + l1lIillIiiIiiiii1l1 for lIlII1iIi1IilIllill1i = lIllillllIilIi1liiII1 + 1, li1i1lllIiIli1ii1i1 do lIii11il11iiii1IliI[lIlII1iIi1IilIllill1i] = nil end end end else local lI1iiIi1IlIlIIiiIiI = lIliii1iIilIl1l1l1i[lIlIil1I1illlIi1iIIlI[3]] local i1lIlIi1I1iliIii11i = {} if lI1iiIi1IlIlIIiiIiI[lIl11II1ll1i1lllIiil1] > 0 then do local iiiii1I11IIliI1ilIl = {} i1lIlIi1I1iliIii11i = iiIl1IiiilIll11l1Ii({}, { __index = function(lIliIi1llI1Ii1IIIiI1I, lliIiIIiil1lI1il1il) local IllIiIi1l11I1i1l11I = iiiii1I11IIliI1ilIl[lliIiIIiil1lI1il1il] return IllIiIi1l11I1i1l11I[1][IllIiIi1l11I1i1l11I[2]] end, __newindex = function(lIliIi1llI1Ii1IIIiI1I, lliIiIIiil1lI1il1il, lil1iIlliliII1il1II) local IllIiIi1l11I1i1l11I = iiiii1I11IIliI1ilIl[lliIiIIiil1lI1il1il] IllIiIi1l11I1i1l11I[1][IllIiIi1l11I1i1l11I[2]] = lil1iIlliliII1il1II end }) for lIlII1iIi1IilIllill1i = 1, lI1iiIi1IlIlIIiiIiI[lIl11II1ll1i1lllIiil1] do local I1iilliIIlliiil11Il = lIl1lilI1I1iliIiil1ii[lll1llIli1lIiii1il1] if I1iilliIIlliiil11Il[iIIiliilI1IIll111il] == lillIli1i1I1IIlI1lI then iiiii1I11IIliI1ilIl[lIlII1iIi1IilIllill1i - 1] = { lIii11il11iiii1IliI, I1iilliIIlliiil11Il[lIliliIl1l1lI1Iil1IiI] } elseif I1iilliIIlliiil11Il[iIIiliilI1IIll111il] == Il11iiI1iil1I11iI1I then iiiii1I11IIliI1ilIl[lIlII1iIi1IilIllill1i - 1] = { i11iIlIiilili1lil11, I1iilliIIlliiil11Il[lIliliIl1l1lI1Iil1IiI] } end lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 + 1 end if not i1I1liIiIii1111I1I1[lIii11il11iiii1IliI] then i1I1liIiIii1111I1I1[lIii11il11iiii1IliI] = {iiiii1I11IIliI1ilIl} else IIllIll1I11I1lII1l1(i1I1liIiIii1111I1I1[lIii11il11iiii1IliI], iiiii1I11IIliI1ilIl) end end end local Ii1iIi11Ii1lilIiI11 = ii1l1ll1l1IlIIi1l11(lI1iiIi1IlIlIIiiIiI, Ii1Il1ilIiIIl11l11I, i1lIlIi1I1iliIii11i) lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = Ii1iIi11Ii1lilIiI11 end elseif lIilIl1i1II1i1iIiI1 >= 24 then if lIilIl1i1II1i1iIiI1 ~= 25 then local iliI1li1IIiIl1IIIl1, llIl1lIIlIIiii1IiIi if lIlIil1I1illlIi1iIIlI[2] then iliI1li1IIiIl1IIIl1 = lIlIil1I1illlIi1iIIlI[7] else iliI1li1IIiIl1IIIl1 = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[1]] end if lIlIil1I1illlIi1iIIlI[6] then llIl1lIIlIIiii1IiIi = lIlIil1I1illlIi1iIIlI[4] else llIl1lIIlIIiii1IiIi = lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[10]] end lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = iliI1li1IIiIl1IIIl1 * llIl1lIIlIIiii1IiIi else lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 + (lIlIil1I1illlIi1iIIlI[3] - Iii1Ii111l111i1il1i) end elseif lIilIl1i1II1i1iIiI1 ~= 23 then local lIllIlliii1iI1ilIiI1i = lIlIil1I1illlIi1iIIlI[5] local I1ilI11iil1I1llIIIl = lIllIlliii1iI1ilIiI1i + 2 local i1IIiili1IIlil1lI1i = { lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i](lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i + 1], lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i + 2]) } for lIlII1iIi1IilIllill1i = 1, lIlIil1I1illlIi1iIIlI[10] do lIii11il11iiii1IliI[I1ilI11iil1I1llIIIl + lIlII1iIi1IilIllill1i] = i1IIiili1IIlil1lI1i[lIlII1iIi1IilIllill1i] end if lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i + 3] ~= nil then lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i + 2] = lIii11il11iiii1IliI[lIllIlliii1iI1ilIiI1i + 3] else lll1llIli1lIiii1il1 = lll1llIli1lIiii1il1 + 1 end else lIii11il11iiii1IliI[lIlIil1I1illlIi1iIIlI[5]] = i11iIlIiilili1lil11[lIlIil1I1illlIi1iIIlI[1]] end end end local lIl1ilii1I11I1llliIIl, lili1I1i1IIlIiIi1ll, IIliIii1l1111iIIlii, lIl1i11i11I1iiIil1ll1 = lIlIIIii11Ilii1l11IlI(lIlIlll11111I111illii) if lIl1ilii1I11I1llliIIl then if IIliIii1l1111iIIlii then return lIliIi1liIIiIII1i11lI(lIii11il11iiii1IliI, IIliIii1l1111iIIlii, lIl1i11i11I1iiIil1ll1) end else IIIlIll1iiIi11iIlII("Luraph Script:" .. (IliIl1I1IiI111iIiI1[lll1llIli1lIiii1il1 - 1] or "") .. ": " .. Il1l11iIIlIIl111Ill(lili1I1i1IIlIiIi1ll), 0) end end IIliIi1iIi1i1ilIlil(I11iiII1i1llIlIIiIl, Ii1Il1ilIiIIl11l11I) return I11iiII1i1llIlIIiIl end local IiiIll1iII1i1iIlli1 = i11I111III1ll1IIiI1() return ii1l1ll1l1IlIIi1l11(IiiIll1iII1i1iIlli1, Ii1Il1ilIiIIl11l11I)() end lIlil11llII111ilii1Iiii1IIi11lilIl1I()) 