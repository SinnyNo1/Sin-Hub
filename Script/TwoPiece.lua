local IliIliliIIili1li11i = assert local i1Il111lII1Iiiil11i = select local I11llIi11iIlI1liI1l = tonumber local I1l1lIlI11lil11lli1 = unpack local lI1ililiiI1I1ill1li = pcall local lIIl1lIiiIll11lIl1I = setfenv local IliIiIII1iiili11ilI = setmetatable local lIlIiI1iiilI1IIlIlIl1 = type local lIll1I1liIi1l11I1iIlI = getfenv local lii1i1iiIlli1i1IIii = tostring local llIIl1lI1IIi1lil1ii = error local iliililiII1liiIlIil = string.sub local I1iiii11lli11iIil1I = string.byte local iIlII1i1l1Il11IIll1 = string.char local lIllII1lII1lIIIi1IiII = string.rep local IIlliliIi1II1llIllI = string.gsub local IilIliii1II11lI111I = string.match local II11iI1lIl1l1liI1il = table.insert local lIlllIiIi11i1IIliliII = I1iiii11lli11iIil1I("3", 1) local i1ilIlI1iiilll1I1ll, il11l11iiliIIi1l1l1 = #{2895}, #{ 4759, 3147, 2833, 6801, 1732, 531, 5490, 5228, 6436, 1183, 3606, 4495, 5663, 2982, 4885, 3387, 3655, 3394, 6848, 2943, 2755, 969, 507, 4786 } + lIlllIiIi11i1IIliliII + 130996 local lIl1ilil1I1l1IIiIiIl1 = {} local lIliil1liIilll1Iiliil = 1 local iiII11IiIIII111llII, i1i1IiilI1I1l1ilii1 local function lIliliiI1lIlillillil1(llliI1lll1IiI1I1lii, lI1IiIlIllI1lill1ll) local lIl1IiilIlillIIiIlI1I llliI1lll1IiI1I1lii = IIlliliIi1II1llIllI(iliililiII1liiIlIil(llliI1lll1IiI1I1lii, 5), "..", function(lIllIlIl1li11iiIlllll) if I1iiii11lli11iIil1I(lIllIlIl1li11iiIlllll, 2) == 72 then lIl1IiilIlillIIiIlI1I = I11llIi11iIlI1liI1l(iliililiII1liiIlIil(lIllIlIl1li11iiIlllll, 1, 1)) return "" else local iIil11Ii1lIillIiiI1 = iIlII1i1l1Il11IIll1(I11llIi11iIlI1liI1l(lIllIlIl1li11iiIlllll, 16)) if lIl1IiilIlillIIiIlI1I then local il1i1lI1IlIi1llllII = lIllII1lII1lIIIi1IiII(iIil11Ii1lIillIiiI1, lIl1IiilIlillIIiIlI1I) lIl1IiilIlillIIiIlI1I = nil return il1i1lI1IlIi1llllII else return iIil11Ii1lIillIiiI1 end end end) local function ll1ili1IllIIlIiI11i() local lIliIli1li1iIIIlIl1lI = I1iiii11lli11iIil1I(llliI1lll1IiI1I1lii, lIliil1liIilll1Iiliil, lIliil1liIilll1Iiliil) lIliil1liIilll1Iiliil = lIliil1liIilll1Iiliil + 1 return lIliIli1li1iIIIlIl1lI end local function l1l1iIlIiIliIlI1i11() local lIliIli1li1iIIIlIl1lI, iIil11Ii1lIillIiiI1, il1i1lI1IlIi1llllII, IilIli1IiiiiiliIIl1 = I1iiii11lli11iIil1I(llliI1lll1IiI1I1lii, lIliil1liIilll1Iiliil, lIliil1liIilll1Iiliil + 3) lIliil1liIilll1Iiliil = lIliil1liIilll1Iiliil + 4 return IilIli1IiiiiiliIIl1 * 16777216 + il1i1lI1IlIi1llllII * 65536 + iIil11Ii1lIillIiiI1 * 256 + lIliIli1li1iIIIlIl1lI end local function illIlI11llll11IIl1l(ilI11lliI111lIlIl11, lIli11I11lII1lili111l, iIIi1i1llliiIIIIlII) if iIIi1i1llliiIIIIlII then local lIlI1IillIlI11I11lIi1, llii1iII1lillIIIiIl = 0, 0 for lIllIIl1i11lii1l1iiiI = lIli11I11lII1lili111l, iIIi1i1llliiIIIIlII do lIlI1IillIlI11I11lIi1 = lIlI1IillIlI11I11lIi1 + 2 ^ llii1iII1lillIIIiIl * illIlI11llll11IIl1l(ilI11lliI111lIlIl11, lIllIIl1i11lii1l1iiiI) llii1iII1lillIIIiIl = llii1iII1lillIIIiIl + 1 end return lIlI1IillIlI11I11lIi1 else local IiI1i1I1l11liill1Ii = 2 ^ (lIli11I11lII1lili111l - 1) return IiI1i1I1l11liill1Ii <= ilI11lliI111lIlIl11 % (IiI1i1I1l11liill1Ii + IiI1i1I1l11liill1Ii) and 1 or 0 end end local function il1i1Iiiilli11iliIl() local lIliIli1li1iIIIlIl1lI, iIil11Ii1lIillIiiI1 = l1l1iIlIiIliIlI1i11(), l1l1iIlIiIliIlI1i11() if lIliIli1li1iIIIlIl1lI == 0 and iIil11Ii1lIillIiiI1 == 0 then return 0 end return (-2 * illIlI11llll11IIl1l(iIil11Ii1lIillIiiI1, 32) + 1) * 2 ^ (illIlI11llll11IIl1l(iIil11Ii1lIillIiiI1, 21, 31) - 1023) * ((illIlI11llll11IIl1l(iIil11Ii1lIillIiiI1, 1, 20) * 4294967296 + lIliIli1li1iIIIlIl1lI) / 4503599627370496 + 1) end local lIli1ilIl1liIlIiI1lll = bit or bit32 local lIl1iI1l1IiiIiiilll11 = lIli1ilIl1liIlIiI1lll and lIli1ilIl1liIlIiI1lll.bxor or function(lIliIli1li1iIIIlIl1lI, iIil11Ii1lIillIiiI1) local IIl1lIlIliIII1i1i1i = 1 local il1i1lI1IlIi1llllII = 0 while lIliIli1li1iIIIlIl1lI > 0 and iIil11Ii1lIillIiiI1 > 0 do local lIIili11IIIl11lII1i = lIliIli1li1iIIIlIl1lI % 2 local lIli1iIi1lIll1iii111i = iIil11Ii1lIillIiiI1 % 2 if lIIili11IIIl11lII1i ~= lIli1iIi1lIll1iii111i then il1i1lI1IlIi1llllII = il1i1lI1IlIi1llllII + IIl1lIlIliIII1i1i1i end lIliIli1li1iIIIlIl1lI = (lIliIli1li1iIIIlIl1lI - lIIili11IIIl11lII1i) / 2 iIil11Ii1lIillIiiI1 = (iIil11Ii1lIillIiiI1 - lIli1iIi1lIll1iii111i) / 2 IIl1lIlIliIII1i1i1i = IIl1lIlIliIII1i1i1i * 2 end if lIliIli1li1iIIIlIl1lI < iIil11Ii1lIillIiiI1 then lIliIli1li1iIIIlIl1lI = iIil11Ii1lIillIiiI1 end while lIliIli1li1iIIIlIl1lI > 0 do local lIIili11IIIl11lII1i = lIliIli1li1iIIIlIl1lI % 2 if lIIili11IIIl11lII1i > 0 then il1i1lI1IlIi1llllII = il1i1lI1IlIi1llllII + IIl1lIlIliIII1i1i1i end lIliIli1li1iIIIlIl1lI = (lIliIli1li1iIIIlIl1lI - lIIili11IIIl11lII1i) / 2 IIl1lIlIliIII1i1i1i = IIl1lIlIliIII1i1i1i * 2 end return il1i1lI1IlIi1llllII end local function llIIIi1i1lI1liiIIii(iIiliI11IlllII1llil) local liill1ili1lIi1III11 = { I1iiii11lli11iIil1I(llliI1lll1IiI1I1lii, lIliil1liIilll1Iiliil, lIliil1liIilll1Iiliil + 3) } lIliil1liIilll1Iiliil = lIliil1liIilll1Iiliil + 4 local lIliIli1li1iIIIlIl1lI = lIl1iI1l1IiiIiiilll11(liill1ili1lIi1III11[1], i1i1IiilI1I1l1ilii1) local iIil11Ii1lIillIiiI1 = lIl1iI1l1IiiIiiilll11(liill1ili1lIi1III11[2], i1i1IiilI1I1l1ilii1) local il1i1lI1IlIi1llllII = lIl1iI1l1IiiIiiilll11(liill1ili1lIi1III11[3], i1i1IiilI1I1l1ilii1) local IilIli1IiiiiiliIIl1 = lIl1iI1l1IiiIiiilll11(liill1ili1lIi1III11[4], i1i1IiilI1I1l1ilii1) i1i1IiilI1I1l1ilii1 = (33 * i1i1IiilI1I1l1ilii1 + iIiliI11IlllII1llil) % 256 return IilIli1IiiiiiliIIl1 * 16777216 + il1i1lI1IlIi1llllII * 65536 + iIil11Ii1lIillIiiI1 * 256 + lIliIli1li1iIIIlIl1lI end local function llii1lIi1l1i1illl11(I1111il1liI1IIIiIIi) local IiiIliii1lIiIIi1i1i = l1l1iIlIiIliIlI1i11() local lIlI11III1IiI1I1l1i11 = "" for lIllIIl1i11lii1l1iiiI = i1ilIlI1iiilll1I1ll, IiiIliii1lIiIIi1i1i do lIlI11III1IiI1I1l1i11 = lIlI11III1IiI1I1l1i11 .. iIlII1i1l1Il11IIll1(lIl1iI1l1IiiIiiilll11(I1iiii11lli11iIil1I(llliI1lll1IiI1I1lii, lIliil1liIilll1Iiliil + lIllIIl1i11lii1l1iiiI - 1), iiII11IiIIII111llII)) iiII11IiIIII111llII = (I1111il1liI1IIIiIIi * iiII11IiIIII111llII + 61) % 256 end lIliil1liIilll1Iiliil = lIliil1liIilll1Iiliil + IiiIliii1lIiIIi1i1i return lIlI11III1IiI1I1l1i11 end iiII11IiIIII111llII = ll1ili1IllIIlIiI11i() i1i1IiilI1I1l1ilii1 = ll1ili1IllIIlIiI11i() local l1iIliiill1il1i1iII = {} for lIllIIl1i11lii1l1iiiI = i1ilIlI1iiilll1I1ll, ll1ili1IllIIlIiI11i() do local iIii111ii11illiIi1I = ll1ili1IllIIlIiI11i() local li1IllliiilIi1Ill1i = (lIllIIl1i11lii1l1iiiI - 1) * 2 l1iIliiill1il1i1iII[li1IllliiilIi1Ill1i] = illIlI11llll11IIl1l(iIii111ii11illiIi1I, 1, 4) l1iIliiill1il1i1iII[li1IllliiilIi1Ill1i + 1] = illIlI11llll11IIl1l(iIii111ii11illiIi1I, 5, 8) end local function l1lillliilIIl1iiIli() local l1i1liIiIiI1ilIilll = { nil, nil, {}, {}, {}, nil, {} } l1l1iIlIiIliIlI1i11() local llIII1IliliIIi1Il1I = l1l1iIlIiIliIlI1i11() for lIllIIl1i11lii1l1iiiI = i1ilIlI1iiilll1I1ll, llIII1IliliIIi1Il1I do l1i1liIiIiI1ilIilll[3][lIllIIl1i11lii1l1iiiI] = l1l1iIlIiIliIlI1i11() end ll1ili1IllIIlIiI11i() ll1ili1IllIIlIiI11i() l1i1liIiIiI1ilIilll[2] = ll1ili1IllIIlIiI11i() l1l1iIlIiIliIlI1i11() ll1ili1IllIIlIiI11i() ll1ili1IllIIlIiI11i() local llIII1IliliIIi1Il1I = l1l1iIlIiIliIlI1i11() for lIllIIl1i11lii1l1iiiI = i1ilIlI1iiilll1I1ll, llIII1IliliIIi1Il1I do l1i1liIiIiI1ilIilll[5][lIllIIl1i11lii1l1iiiI - i1ilIlI1iiilll1I1ll] = l1lillliilIIl1iiIli() end ll1ili1IllIIlIiI11i() l1i1liIiIiI1ilIilll[1] = ll1ili1IllIIlIiI11i() l1l1iIlIiIliIlI1i11() local i1iIiililIIII1l1IIi = l1l1iIlIiIliIlI1i11() - (#{ 1993, 1806, 6360, 744, 5255, 4198, 6846, 6179, 978, 5982, 4207, 4918, 1185, 2604, 2953, 1237, 4309, 4385, 6605, 5859, 6484, 3743, 3330, 2488 } + lIlllIiIi11i1IIliliII + 133645) local I1lI1i1I1ilIi1I1ii1 = ll1ili1IllIIlIiI11i() for lIllIIl1i11lii1l1iiiI = i1ilIlI1iiilll1I1ll, i1iIiililIIII1l1IIi do local ii1liilIllIilI1Ill1 = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil } local iIii111ii11illiIi1I = llIIIi1i1lI1liiIIii(I1lI1i1I1ilIi1I1ii1) ii1liilIllIilI1Ill1[9] = illIlI11llll11IIl1l(iIii111ii11illiIi1I, #{ 2725, 5618, 6539, 1678, 6014, 5126, 1513, 4374, 1048, 4134, 6241, 409, 5193, 6144, 1144, 67, 3660, 3269, 1132 }, #{ 6317, 3748, 1932, 3983, 5032, 6642, 2901, 3759, 374, 2657, 3350, 5117, 2322, 197, 3973, 1369, 854, 1518, 4248, 373, 6412, 5825, 1369 } + lIlllIiIi11i1IIliliII + -48) ii1liilIllIilI1Ill1[10] = illIlI11llll11IIl1l(iIii111ii11illiIi1I, #{ 6596, 6909, 2763, 46, 2285, 4699, 1972, 2570, 5501, 6329, 2192, 1149, 6106, 4476, 2444, 4541, 908, 736, 655, 5457 } + lIlllIiIi11i1IIliliII + -44, #{ 2056, 2166, 6136, 6085, 6640, 6104, 3864, 4976, 972, 6950, 6020, 6332, 4540, 5320, 6261, 391, 4362, 3117, 230, 1236 } + lIlllIiIi11i1IIliliII + -39) ii1liilIllIilI1Ill1[8] = illIlI11llll11IIl1l(iIii111ii11illiIi1I, #{6926}, #{ 1843, 821, 5600, 5347, 5752, 4282, 5478, 5278, 4421 }) ii1liilIllIilI1Ill1[3] = illIlI11llll11IIl1l(iIii111ii11illiIi1I, #{5808}, #{ 4542, 5523, 1593, 5155, 2340, 1654, 3012, 1092, 2139, 725, 1847, 2813, 2183, 4058, 1401, 2781, 5015, 4962 }) ii1liilIllIilI1Ill1[1] = illIlI11llll11IIl1l(iIii111ii11illiIi1I, #{ 4546, 4890, 4129, 3698, 2038, 3235, 1470, 1908, 2671, 4655 }, #{ 271, 5951, 2493, 4710, 4052, 5157, 1836, 4781, 5310, 4522, 2921, 2548, 6402, 1579, 6819, 577, 5376, 567 }) l1i1liIiIiI1ilIilll[4][lIllIIl1i11lii1l1iiiI] = ii1liilIllIilI1Ill1 end local llIII1IliliIIi1Il1I = l1l1iIlIiIliIlI1i11() - (#{ 95, 5996, 4109, 5093, 4717, 653, 596, 2202, 2005, 6590, 4495, 5524, 3605, 3053, 4407, 4845, 1584, 2858, 4917, 6140, 2902, 459, 6364 } + lIlllIiIi11i1IIliliII + 133647) local iiIi1iil1Ill1lIIlIl = ll1ili1IllIIlIiI11i() for lIllIIl1i11lii1l1iiiI = i1ilIlI1iiilll1I1ll, llIII1IliliIIi1Il1I do local IlI11IiiIlIiI1li1ii local lIlIiI1iiilI1IIlIlIl1 = ll1ili1IllIIlIiI11i() if lIlIiI1iiilI1IIlIlIl1 == #{ 3042, 545, 5334, 510, 675, 1849, 332, 6446, 3868, 4693, 4568, 5154, 1381, 2464, 3880, 1632, 2369, 337, 5637, 3523, 700, 2885, 88 } + lIlllIiIi11i1IIliliII + 77 then IlI11IiiIlIiI1li1ii = l1l1iIlIiIliIlI1i11() end if lIlIiI1iiilI1IIlIlIl1 == #{ 1384, 649, 1726, 1882, 162, 6310, 3987, 2986, 5796, 3131, 2961, 3094, 1380, 3636, 3085, 1534, 1302, 951, 3709, 4355, 274, 1331 } + lIlllIiIi11i1IIliliII + -13 then IlI11IiiIlIiI1li1ii = il1i1Iiiilli11iliIl() end if lIlIiI1iiilI1IIlIlIl1 == #{ 2715, 2049, 3904, 743, 1549, 6009, 2215, 3472, 913, 5897, 3625, 3129, 5874, 2860, 5365, 1792, 6806, 2010, 3977, 946, 2038, 5052 } + lIlllIiIi11i1IIliliII + 113 then IlI11IiiIlIiI1li1ii = iliililiII1liiIlIil(llii1lIi1l1i1illl11(iiIi1iil1Ill1lIIlIl), #{ 5536, 3889, 5984 }) end if lIlIiI1iiilI1IIlIlIl1 == #{ 6291, 5283, 881, 2918, 5724, 3234, 1297, 3228, 4746, 5605, 6417, 1536, 2490, 5702, 5895, 5246, 2473, 4830, 5662, 1055, 2614, 4259 } + lIlllIiIi11i1IIliliII + -4 then IlI11IiiIlIiI1li1ii = iliililiII1liiIlIil(llii1lIi1l1i1illl11(insEncKey), #{ 2815, 1094, 4244, 2592 }) end if lIlIiI1iiilI1IIlIlIl1 == #{ 4286, 3788, 5254, 2156, 2601, 5500, 808, 3767, 5313, 1605, 4197, 4552, 432, 628, 4448, 4730, 2224, 3703, 1702, 1069 } + lIlllIiIi11i1IIliliII + 103 then IlI11IiiIlIiI1li1ii = il1i1Iiiilli11iliIl() end if lIlIiI1iiilI1IIlIlIl1 == #{ 6463, 4247, 4224, 2267, 6375, 3042, 3242, 3254, 5448, 3785 } then IlI11IiiIlIiI1li1ii = iliililiII1liiIlIil(llii1lIi1l1i1illl11(iiIi1iil1Ill1lIIlIl), #{4091, 3843}) end if lIlIiI1iiilI1IIlIlIl1 == #{ 4512, 5642, 3177, 2124, 4750, 2710, 6087, 2282, 1739, 2383, 4725, 1681, 4875, 3549, 5400, 27, 6860, 1837, 146, 1338 } then IlI11IiiIlIiI1li1ii = ll1ili1IllIIlIiI11i() + l1l1iIlIiIliIlI1i11() + il1i1Iiiilli11iliIl() end if lIlIiI1iiilI1IIlIlIl1 == #{ 1430, 4177, 6507, 1952, 5902, 1819, 6525, 1492, 5285, 3870, 3736, 3311, 5665, 4162, 2715, 530, 3504, 401, 3791, 5482, 3285, 550, 3825 } + lIlllIiIi11i1IIliliII + 89 then IlI11IiiIlIiI1li1ii = #{ 6764, 708, 1138, 6145, 2378, 4837, 6524, 469, 4690, 1526, 3208, 853, 1574, 489, 6417, 2252, 6314, 899, 2940, 6354, 2936, 3882, 4498 } + lIlllIiIi11i1IIliliII + 102639 == #{ 6764, 708, 1138, 6145, 2378, 4837, 6524, 469, 4690, 1526, 3208, 853, 1574, 489, 6417, 2252, 6314, 899, 2940, 6354, 2936, 3882, 4498 } + lIlllIiIi11i1IIliliII + 102639 end if lIlIiI1iiilI1IIlIlIl1 == #{ 6509, 6931, 3099, 1089, 1197, 2822, 6231, 4373, 505, 26, 2262, 5411, 5635, 264, 6616, 5741, 1711, 2409, 1561, 3771 } + lIlllIiIi11i1IIliliII + -31 then IlI11IiiIlIiI1li1ii = #{ 4952, 4920, 2909, 6406, 2625, 5361, 312, 3, 4825, 607, 5126, 3039, 4689, 5909, 5172, 1338, 1674, 846, 1337, 1199, 2962, 6405, 1647, 2898 } + lIlllIiIi11i1IIliliII + 45195 == #{ 1172, 3303, 5520, 6587, 2752, 2053, 2920, 5786, 4340, 1727, 5320, 447, 3447, 5453, 3187, 2719, 4377, 721, 5731, 5376, 5909, 22, 3118 } + lIlllIiIi11i1IIliliII + 10318 end l1i1liIiIiI1ilIilll[7][lIllIIl1i11lii1l1iiiI - i1ilIlI1iiilll1I1ll] = IlI11IiiIlIiI1li1ii end for lIllIIl1i11lii1l1iiiI = i1ilIlI1iiilll1I1ll, i1iIiililIIII1l1IIi do local ii1liilIllIilI1Ill1 = l1i1liIiIiI1ilIilll[4][lIllIIl1i11lii1l1iiiI] local iIlIl1I1lIi1l11III1 = l1iIliiill1il1i1iII[ii1liilIllIilI1Ill1[10]] if iIlIl1I1lIi1l11III1 == #{ 6452, 2898, 2562, 6422 } then ii1liilIllIilI1Ill1[7] = l1i1liIiIiI1ilIilll[7][ii1liilIllIilI1Ill1[3]] end if iIlIl1I1lIi1l11III1 == #{2967} and ii1liilIllIilI1Ill1[8] > 255 then ii1liilIllIilI1Ill1[2] = true ii1liilIllIilI1Ill1[4] = l1i1liIiIiI1ilIilll[7][ii1liilIllIilI1Ill1[8] - 256] end if iIlIl1I1lIi1l11III1 == #{2781, 6177} and ii1liilIllIilI1Ill1[1] > 255 then ii1liilIllIilI1Ill1[6] = true ii1liilIllIilI1Ill1[5] = l1i1liIiIiI1ilIilll[7][ii1liilIllIilI1Ill1[1] - 256] end if iIlIl1I1lIi1l11III1 == #{ 2137, 3884, 3339 } then if ii1liilIllIilI1Ill1[8] > 255 then ii1liilIllIilI1Ill1[2] = true ii1liilIllIilI1Ill1[4] = l1i1liIiIiI1ilIilll[7][ii1liilIllIilI1Ill1[8] - 256] end if ii1liilIllIilI1Ill1[1] > 255 then ii1liilIllIilI1Ill1[6] = true ii1liilIllIilI1Ill1[5] = l1i1liIiIiI1ilIilll[7][ii1liilIllIilI1Ill1[1] - 256] end end end l1i1liIiIiI1ilIilll[6] = ll1ili1IllIIlIiI11i() l1l1iIlIiIliIlI1i11() l1l1iIlIiIliIlI1i11() return l1i1liIiIiI1ilIilll end local function ililiIIIl1Il1iIIl11(l1i1liIiIiI1ilIilll, lI1IiIlIllI1lill1ll, iIiIiiiI1II1lliIliI) local IlIiilIliIIiii111ll, lIlIi11I1lIl1iIllllIl = 8, 23 local lIll1l1I1iii1I1II11i1 = l1i1liIiIiI1ilIilll[4] local ll11lliiI1lil1ii1Il = 6 local I11iII1IiI1liIlii1I = l1i1liIiIiI1ilIilll[5] local l1lIi1ilIIiIii1llIl = l1i1liIiIiI1ilIilll[2] local i1l11iiIi1i1I1lIliI = l1i1liIiIiI1ilIilll[1] local lIlIllIIi1l1lli1Il11i = 10 local Iliililil1l11ii1i11 = l1i1liIiIiI1ilIilll[3] local IlIiIll1iI1lI1IiIIl = 8 local function lIlIIl1Il11lIliiiIIII(...) local iilIiilli1IlliIIiI1 = 0 local IlI11IiI1iI111lil11 = { I1l1lIlI11lil11lli1({}, 1, i1l11iiIi1i1I1lIliI) } local lIlI1IiiIiiiIlII1I1ll = 1 local l1111ilIIII1ii1IIII = {} local lIl1IllIIlIIlI1IIi1Il = {} local lI1IiIlIllI1lill1ll = lIll1I1liIi1l11I1iIlI() local lIlliiiI1ll1i1lilI1 = { ... } local lIii1l1lIliiiii1II1 = #lIlliiiI1ll1i1lilI1 - 1 for lIllIIl1i11lii1l1iiiI = 0, lIii1l1lIliiiii1II1 do if lIllIIl1i11lii1l1iiiI < l1lIi1ilIIiIii1llIl then IlI11IiI1iI111lil11[lIllIIl1i11lii1l1iiiI] = lIlliiiI1ll1i1lilI1[lIllIIl1i11lii1l1iiiI + 1] end end local function IiiIilllllI1IlIIIII(...) local il1i1lI1IlIi1llllII = i1Il111lII1Iiiil11i("#", ...) local lIlII1Ii11iIl1lIli111 = { ... } return il1i1lI1IlIi1llllII, lIlII1Ii11iIl1lIli111 end local function IlI11I1lIIliiIiil1i() while true do local IIIiil1l1l1l1li1l1l = lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] local Ii11IilIii1iIIIIIiI = IIIiil1l1l1l1li1l1l[10] lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll + 1 if Ii11IilIii1iIIIIIiI < 12 then if Ii11IilIii1iIIIIIiI >= 6 then if Ii11IilIii1iIIIIIiI >= 9 then if Ii11IilIii1iIIIIIiI < 10 then if IIIiil1l1l1l1li1l1l[1] == 138 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll - 1 lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] = { [10] = 20, [9] = (IIIiil1l1l1l1li1l1l[9] - 0) % 256, [8] = (IIIiil1l1l1l1li1l1l[8] - 0) % 256 } elseif IIIiil1l1l1l1li1l1l[1] == 168 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll - 1 lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] = { [10] = 13, [9] = (IIIiil1l1l1l1li1l1l[9] - 15) % 256, [1] = (IIIiil1l1l1l1li1l1l[8] - 15) % 256 } else l1111ilIIII1ii1IIII[IlI11IiI1iI111lil11] = nil local I1I1IIliIili1IIIIi1 = IIIiil1l1l1l1li1l1l[9] local i1iI1illlll1IllI11l = IIIiil1l1l1l1li1l1l[8] if i1iI1illlll1IllI11l == 1 then return true end local lIlI11iiiil1lilII11li = I1I1IIliIili1IIIIi1 + i1iI1illlll1IllI11l - 2 if i1iI1illlll1IllI11l == 0 then lIlI11iiiil1lilII11li = iilIiilli1IlliIIiI1 end return true, I1I1IIliIili1IIIIi1, lIlI11iiiil1lilII11li end elseif Ii11IilIii1iIIIIIiI == 11 then local iIil11Ii1lIillIiiI1, il1i1lI1IlIi1llllII if IIIiil1l1l1l1li1l1l[2] then iIil11Ii1lIillIiiI1 = IIIiil1l1l1l1li1l1l[4] else iIil11Ii1lIillIiiI1 = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]] end if IIIiil1l1l1l1li1l1l[6] then il1i1lI1IlIi1llllII = IIIiil1l1l1l1li1l1l[5] else il1i1lI1IlIi1llllII = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[1]] end if iIil11Ii1lIillIiiI1 == il1i1lI1IlIi1llllII ~= (IIIiil1l1l1l1li1l1l[9] ~= 0) then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll + 1 end else IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = IIIiil1l1l1l1li1l1l[7] end elseif Ii11IilIii1iIIIIIiI < 7 then local I1I1IIliIili1IIIIi1 = IIIiil1l1l1l1li1l1l[9] local lIlliiiI1ll1i1lilI1 = IIIiil1l1l1l1li1l1l[8] local IllI11IIIiiil1ll11l = IIIiil1l1l1l1li1l1l[1] local lIl111IiiI1lIl1iiIi1i, lIlI11iiiil1lilII11li, IlI11I1lIIliiIiil1i if lIlliiiI1ll1i1lilI1 ~= 1 then if lIlliiiI1ll1i1lilI1 ~= 0 then lIlI11iiiil1lilII11li = I1I1IIliIili1IIIIi1 + lIlliiiI1ll1i1lilI1 - 1 else lIlI11iiiil1lilII11li = iilIiilli1IlliIIiI1 end lIlI11iiiil1lilII11li, lIl111IiiI1lIl1iiIi1i = IiiIilllllI1IlIIIII(IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1](I1l1lIlI11lil11lli1(IlI11IiI1iI111lil11, I1I1IIliIili1IIIIi1 + 1, lIlI11iiiil1lilII11li))) else lIlI11iiiil1lilII11li, lIl111IiiI1lIl1iiIi1i = IiiIilllllI1IlIIIII(IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1]()) end if IllI11IIIiiil1ll11l ~= 1 then if IllI11IIIiiil1ll11l ~= 0 then lIlI11iiiil1lilII11li = I1I1IIliIili1IIIIi1 + IllI11IIIiiil1ll11l - 2 iilIiilli1IlliIIiI1 = lIlI11iiiil1lilII11li + 1 else lIlI11iiiil1lilII11li = lIlI11iiiil1lilII11li + I1I1IIliIili1IIIIi1 - 1 iilIiilli1IlliIIiI1 = lIlI11iiiil1lilII11li end IlI11I1lIIliiIiil1i = 0 for lIllIIl1i11lii1l1iiiI = I1I1IIliIili1IIIIi1, lIlI11iiiil1lilII11li do IlI11I1lIIliiIiil1i = IlI11I1lIIliiIiil1i + 1 IlI11IiI1iI111lil11[lIllIIl1i11lii1l1iiiI] = lIl111IiiI1lIl1iiIi1i[IlI11I1lIIliiIiil1i] end else iilIiilli1IlliIIiI1 = I1I1IIliIili1IIIIi1 - 1 end for lIllIIl1i11lii1l1iiiI = iilIiilli1IlliIIiI1 + 1, i1l11iiIi1i1I1lIliI do IlI11IiI1iI111lil11[lIllIIl1i11lii1l1iiiI] = nil end elseif Ii11IilIii1iIIIIIiI == 8 then IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]] elseif IIIiil1l1l1l1li1l1l[1] == 39 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll - 1 lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] = { [10] = 15, [9] = (IIIiil1l1l1l1li1l1l[9] - 195) % 256, [8] = (IIIiil1l1l1l1li1l1l[8] - 195) % 256 } else IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = not IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]] end elseif Ii11IilIii1iIIIIIiI >= 3 then if Ii11IilIii1iIIIIIiI >= 4 then if Ii11IilIii1iIIIIIiI ~= 5 then local li1IllliiilIi1Ill1i = (IIIiil1l1l1l1li1l1l[1] - 1) * 50 local IiiiiiIi1lllI11illl = IIIiil1l1l1l1li1l1l[8] if IiiiiiIi1lllI11illl == 0 then IiiiiiIi1lllI11illl = iilIiilli1IlliIIiI1 - IIIiil1l1l1l1li1l1l[9] end for lIllIIl1i11lii1l1iiiI = 1, IiiiiiIi1lllI11illl do IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]][li1IllliiilIi1Ill1i + lIllIIl1i11lii1l1iiiI] = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9] + lIllIIl1i11lii1l1iiiI] end else local Il1III1li1IIi1Ii1i1 = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]] local il1i1lI1IlIi1llllII if IIIiil1l1l1l1li1l1l[6] then il1i1lI1IlIi1llllII = IIIiil1l1l1l1li1l1l[5] else il1i1lI1IlIi1llllII = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[1]] end IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9] + 1] = Il1III1li1IIi1Ii1i1 IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = Il1III1li1IIi1Ii1i1[il1i1lI1IlIi1llllII] end elseif not not IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] == (IIIiil1l1l1l1li1l1l[1] == 0) then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll + 1 end elseif Ii11IilIii1iIIIIIiI >= 1 then if Ii11IilIii1iIIIIIiI == 2 then local il1i1lI1IlIi1llllII if IIIiil1l1l1l1li1l1l[6] then il1i1lI1IlIi1llllII = IIIiil1l1l1l1li1l1l[5] else il1i1lI1IlIi1llllII = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[1]] end IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]][il1i1lI1IlIi1llllII] else lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll + (IIIiil1l1l1l1li1l1l[3] - il11l11iiliIIi1l1l1) end else local iII11liI1IlIlIiIIII = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]] for lIllIIl1i11lii1l1iiiI = IIIiil1l1l1l1li1l1l[8] + 1, IIIiil1l1l1l1li1l1l[1] do iII11liI1IlIlIiIIII = iII11liI1IlIlIiIIII .. IlI11IiI1iI111lil11[lIllIIl1i11lii1l1iiiI] end IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = iII11liI1IlIlIiIIII end elseif Ii11IilIii1iIIIIIiI < 18 then if Ii11IilIii1iIIIIIiI >= 15 then if Ii11IilIii1iIIIIIiI >= 16 then if Ii11IilIii1iIIIIIiI ~= 17 then local lIl11il1l1IIiiIlliiII = I11iII1IiI1liIlii1I[IIIiil1l1l1l1li1l1l[3]] local IiilI1l1lI11ilIllIi = {} if lIl11il1l1IIiiIlliiII[ll11lliiI1lil1ii1Il] > 0 then do local l111IliIiill1ii1iIl = {} IiilI1l1lI11ilIllIi = IliIiIII1iiili11ilI({}, { __index = function(lIlII1Ii11iIl1lIli111, Iilii11Iliil111iI1I) local Il1lilliI1Iiii111l1 = l111IliIiill1ii1iIl[Iilii11Iliil111iI1I] return Il1lilliI1Iiii111l1[1][Il1lilliI1Iiii111l1[2]] end, __newindex = function(lIlII1Ii11iIl1lIli111, Iilii11Iliil111iI1I, I1li1iIilllliiIi1iI) local Il1lilliI1Iiii111l1 = l111IliIiill1ii1iIl[Iilii11Iliil111iI1I] Il1lilliI1Iiii111l1[1][Il1lilliI1Iiii111l1[2]] = I1li1iIilllliiIi1iI end }) for lIllIIl1i11lii1l1iiiI = 1, lIl11il1l1IIiiIlliiII[ll11lliiI1lil1ii1Il] do local lIllllI11liI1i1IIil = lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] if lIllllI11liI1i1IIil[lIlIllIIi1l1lli1Il11i] == IlIiilIliIIiii111ll then l111IliIiill1ii1iIl[lIllIIl1i11lii1l1iiiI - 1] = { IlI11IiI1iI111lil11, lIllllI11liI1i1IIil[IlIiIll1iI1lI1IiIIl] } elseif lIllllI11liI1i1IIil[lIlIllIIi1l1lli1Il11i] == lIlIi11I1lIl1iIllllIl then l111IliIiill1ii1iIl[lIllIIl1i11lii1l1iiiI - 1] = { iIiIiiiI1II1lliIliI, lIllllI11liI1i1IIil[IlIiIll1iI1lI1IiIIl] } end lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll + 1 end if not l1111ilIIII1ii1IIII[IlI11IiI1iI111lil11] then l1111ilIIII1ii1IIII[IlI11IiI1iI111lil11] = {l111IliIiill1ii1iIl} else II11iI1lIl1l1liI1il(l1111ilIIII1ii1IIII[IlI11IiI1iI111lil11], l111IliIiill1ii1iIl) end end end local ililI1liI1lll1l1111 = ililiIIIl1Il1iIIl11(lIl11il1l1IIiiIlliiII, lI1IiIlIllI1lill1ll, IiilI1l1lI11ilIllIi) IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = ililI1liI1lll1l1111 else IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = { I1l1lIlI11lil11lli1(lIl1ilil1I1l1IIiIiIl1, 1, IIIiil1l1l1l1li1l1l[8] == 0 and 255 or IIIiil1l1l1l1li1l1l[8]) } end elseif IIIiil1l1l1l1li1l1l[1] == 173 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll - 1 lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] = { [10] = 23, [9] = (IIIiil1l1l1l1li1l1l[9] - 59) % 256, [8] = (IIIiil1l1l1l1li1l1l[8] - 59) % 256 } else for lIllIIl1i11lii1l1iiiI = IIIiil1l1l1l1li1l1l[9], IIIiil1l1l1l1li1l1l[8] do IlI11IiI1iI111lil11[lIllIIl1i11lii1l1iiiI] = nil end end elseif Ii11IilIii1iIIIIIiI < 13 then IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = lI1IiIlIllI1lill1ll[IIIiil1l1l1l1li1l1l[7]] elseif Ii11IilIii1iIIIIIiI == 14 then if IIIiil1l1l1l1li1l1l[1] == 0 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll - 1 lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] = { [10] = 8, [9] = (IIIiil1l1l1l1li1l1l[9] - 142) % 256, [8] = (IIIiil1l1l1l1li1l1l[8] - 142) % 256 } else local I1iIl1ii1lIIiIi1Ili = IIIiil1l1l1l1li1l1l[9] local Ii1iil1IlilIllIIiI1 = {} for Iili1Ii1IiIii11Ii11, l111IliIiill1ii1iIl in pairs(l1111ilIIII1ii1IIII[IlI11IiI1iI111lil11]) do for Iili1Ii1IiIii11Ii11, Il1lilliI1Iiii111l1 in pairs(l111IliIiill1ii1iIl) do if Il1lilliI1Iiii111l1[1] == IlI11IiI1iI111lil11 and I1iIl1ii1lIIiIi1Ili <= Il1lilliI1Iiii111l1[2] then local li1iI1ii1li1lIlllil = Il1lilliI1Iiii111l1[2] if not Ii1iil1IlilIllIIiI1[li1iI1ii1li1lIlllil] then ililiIIIl1Il1iIIl11(lIl1IllIIlIIlI1IIi1Il, IlI11IiI1iI111lil11[li1iI1ii1li1lIlllil]) Ii1iil1IlilIllIIiI1[li1iI1ii1li1lIlllil] = #lIl1IllIIlIIlI1IIi1Il end Il1lilliI1Iiii111l1[1] = lIl1IllIIlIIlI1IIi1Il Il1lilliI1Iiii111l1[2] = Ii1iil1IlilIllIIiI1[li1iI1ii1li1lIlllil] end end end end else local I1I1IIliIili1IIIIi1 = IIIiil1l1l1l1li1l1l[9] local li1IllliiilIi1Ill1i = I1I1IIliIili1IIIIi1 + 2 local iII11liI1IlIlIiIIII = { IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1](IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1 + 1], IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1 + 2]) } for lIllIIl1i11lii1l1iiiI = 1, IIIiil1l1l1l1li1l1l[1] do IlI11IiI1iI111lil11[li1IllliiilIi1Ill1i + lIllIIl1i11lii1l1iiiI] = iII11liI1IlIlIiIIII[lIllIIl1i11lii1l1iiiI] end if IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1 + 3] ~= nil then IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1 + 2] = IlI11IiI1iI111lil11[I1I1IIliIili1IIIIi1 + 3] else lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll + 1 end end elseif Ii11IilIii1iIIIIIiI < 21 then if Ii11IilIii1iIIIIIiI >= 19 then if Ii11IilIii1iIIIIIiI ~= 20 then lI1IiIlIllI1lill1ll[IIIiil1l1l1l1li1l1l[7]] = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] elseif IIIiil1l1l1l1li1l1l[1] == 102 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll - 1 lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] = { [10] = 9, [9] = (IIIiil1l1l1l1li1l1l[9] - 181) % 256, [8] = (IIIiil1l1l1l1li1l1l[8] - 181) % 256 } else iIiIiiiI1II1lliIliI[IIIiil1l1l1l1li1l1l[8]] = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] end else local iIil11Ii1lIillIiiI1, il1i1lI1IlIi1llllII if IIIiil1l1l1l1li1l1l[2] then iIil11Ii1lIillIiiI1 = IIIiil1l1l1l1li1l1l[4] else iIil11Ii1lIillIiiI1 = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]] end if IIIiil1l1l1l1li1l1l[6] then il1i1lI1IlIi1llllII = IIIiil1l1l1l1li1l1l[5] else il1i1lI1IlIi1llllII = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[1]] end IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]][iIil11Ii1lIillIiiI1] = il1i1lI1IlIi1llllII end elseif Ii11IilIii1iIIIIIiI < 22 then IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = IIIiil1l1l1l1li1l1l[8] ~= 0 if IIIiil1l1l1l1li1l1l[1] ~= 0 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll + 1 end elseif Ii11IilIii1iIIIIIiI == 23 then if IIIiil1l1l1l1li1l1l[1] == 78 then lIlI1IiiIiiiIlII1I1ll = lIlI1IiiIiiiIlII1I1ll - 1 lIll1l1I1iii1I1II11i1[lIlI1IiiIiiiIlII1I1ll] = { [10] = 3, [9] = (IIIiil1l1l1l1li1l1l[9] - 202) % 256, [1] = (IIIiil1l1l1l1li1l1l[8] - 202) % 256 } else IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = iIiIiiiI1II1lliIliI[IIIiil1l1l1l1li1l1l[8]] end else local iIil11Ii1lIillIiiI1, il1i1lI1IlIi1llllII if IIIiil1l1l1l1li1l1l[2] then iIil11Ii1lIillIiiI1 = IIIiil1l1l1l1li1l1l[4] else iIil11Ii1lIillIiiI1 = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[8]] end if IIIiil1l1l1l1li1l1l[6] then il1i1lI1IlIi1llllII = IIIiil1l1l1l1li1l1l[5] else il1i1lI1IlIi1llllII = IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[1]] end IlI11IiI1iI111lil11[IIIiil1l1l1l1li1l1l[9]] = iIil11Ii1lIillIiiI1 * il1i1lI1IlIi1llllII end end end local illIlll1lillIlliI1i, lIlI11III1IiI1I1l1i11, I1iIl1ii1lIIiIi1Ili, IlIil11llli1Ii1Illi = lI1ililiiI1I1ill1li(IlI11I1lIIliiIiil1i) if illIlll1lillIlliI1i then if I1iIl1ii1lIIiIi1Ili then return I1l1lIlI11lil11lli1(IlI11IiI1iI111lil11, I1iIl1ii1lIIiIi1Ili, IlIil11llli1Ii1Illi) end else llIIl1lI1IIi1lil1ii("Luraph Script:" .. (Iliililil1l11ii1i11[lIlI1IiiIiiiIlII1I1ll - 1] or "") .. ": " .. lii1i1iiIlli1i1IIii(lIlI11III1IiI1I1l1i11), 0) end end lIIl1lIiiIll11lIl1I(lIlIIl1Il11lIliiiIIII, lI1IiIlIllI1lill1ll) return lIlIIl1Il11lIliiiIIII end local Ii1iil1IlilIllIIiI1 = l1lillliilIIl1iiIli() return ililiIIIl1Il1iIIl11(Ii1iil1IlilIllIIiI1, lI1IiIlIllI1lill1ll)() end lIliliiI1lIlillillillIll1I1liIi1l11I1iIlI()) 